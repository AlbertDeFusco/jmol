<html>
<head>
<title>Jmol Interactive Examples</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="stylesheet" type="text/css" href="styles.css" />
<script type="text/javascript" src="Jmol.js"></script>
<script type="text/javascript" src="new.js"></script>
<script type="text/javascript">
//<![CDATA[
title="ATOMS";model="caffeine.xyz"
//messagecallback=""
//animcallback=""
//pickcallback=""
//loadstructcallback=""
delayms = 100; delayms0 = 10000000
Callbacks=new Array("-atomPicked","fileLoaded","fileLoadError","-frameChanged","-measurePending","-measureCompleted","-measurePicked","-scriptStarted","-scriptEcho","scriptStatus","scriptError","scriptMessage", "-scriptTerminated","-userAction","-viewerRefreshed","-newOrientation")
function getCheckList(){
 var s=""
 var skey=""
 var ischecked=0
 for(var i=0;i<Callbacks.length;i++){
	skey=Callbacks[i]
	ischecked=(skey.charAt(0)!="-")
	Callbacks[i]=skey=skey.replace(/\-/,"")
	s+=" <label><input type=checkbox id='"+skey+"'"+(ischecked?" checked=1":"")+">"+skey+"</label>"
	if((i+1)%4==0)s+="<br>"
 }
 s+=" <a href=javascript:setOptions(1)>all</a> <a href=javascript:setOptions(0)>none</a> "
 return s
}
function getCallbackOptions(){
 var s="monitoring:"
 for(var i=0;i<Callbacks.length;i++)if(document.getElementById(Callbacks[i]).checked)s+=Callbacks[i]
 return s
}
function setOptions(all_or_none){
 for(var i=0;i<Callbacks.length;i++)document.getElementById(Callbacks[i]).checked = all_or_none
}
Scripts=new Array(" "
,' This prototype page illustrates both JSON processing and a possible "no-callback" mechanism for interacting with the applet. '
,'### expanded measure (aka "monitor/monitors/measures/measurement/measurements") options ###'
	,'load caffeine.xyz;set picking DISTANCE'
	,'measure RANGE 1.0 1.5 ALL (carbon) (oxygen)'
	,'set measurements angstroms'
	,'set measurements nm'
	,'set measurements pm'
	,'set measurementNumbers OFF #same as "set measurements" but clearer in intent'
	,'set measurementNumbers ON'
	,'set measurements off #still works, but will not be emphasized'
	,'set measurements ON'
	,'measure RANGE 1.5 6.5 ALL (oxygen) (oxygen)'
	,'measure 2 4 5 6'
	,'measurements DELETE'
	,'measure ALLCONNECTED (oxygen) (carbon)'
	,'measures OFF #proposed change here -- for discussion -- does not delete'
	,'measures ON  #turns all currently-defined measures on'
	,'measure RANGE 1.5 6.5 ALL (oxygen) (oxygen)'
	,'measurements OFF ALL (oxygen) (oxygen)'
	,'measurements ON ALL (oxygen) (oxygen)'
	,'# NOTE: over and above all this is "set showMeasurements", which acts ACROSS FILE LOADS'
	,'set showMeasurements OFF'
	,'load caffeine.xyz;set picking DISTANCE'
	,'measure RANGE 1.0 1.5 ALL (carbon) (oxygen)'
	,'# nothing appears until we set showMeasurements ON:'
	,'set showMeasurements ON'

,'### measure all ###'
,'# measure ALL generates measurements for all matching distances, angles, or dihedrals.'
,'load "quartz.cif" {1 1 1}'
,'measures off;measure all 110.4 110.6 (oxygen) (silicon) (oxygen)'
,'measures off'
,'#another axis:'
,'measures off;measure all 108.7 108.9 (oxygen) (silicon) (oxygen)'
,'draw line1 250 (atomno=2 or atomno=8) (atomno=9 or atomno=4)'
,'rotate $line1 180 60;'
,'measures off'

,'### using getProperty and show measures ###'
	,'load caffeine.xyz;set picking DISTANCE'
	,'measure RANGE 1.0 1.5 ALL (carbon) (oxygen)'
	,'show measurements #via messageCallback (see the textarea below the applet)'
	,'<a href="javascript:alert(jmolGetPropertyAsJSON(\'measurementInfo\'))">javascript:alert(jmolGetPropertyAsJSON(\'measurementInfo\'))</a>'
	,'<a href="javascript:alert(jmolGetPropertyAsArray(\'measurementInfo\')[0].strMeasurement)">javascript:alert(jmolGetPropertyAsArray(\'measurementInfo\')[0].strMeasurement)</a>'
	,'<a href="javascript:alert(jmolGetPropertyAsArray(\'measurementInfo\')[0].value)">javascript:alert(jmolGetPropertyAsArray(\'measurementInfo\')[0].value)</a>'
	,'<a href="javascript:alert(jmolGetPropertyAsArray(\'measurementInfo\')[0].type)">javascript:alert(jmolGetPropertyAsArray(\'measurementInfo\')[0].type)</a>'
	,'<a href="javascript:alert(jmolGetPropertyAsArray(\'measurementInfo\')[0].count)">javascript:alert(jmolGetPropertyAsArray(\'measurementInfo\')[0].count)</a>'
	,'<a href="javascript:alert(jmolGetPropertyAsArray(\'measurementInfo\')[0].atoms[0].info)">javascript:alert(jmolGetPropertyAsArray(\'measurementInfo\')[0].atoms[0].info)</a>'
	,'<a href="javascript:alert(jmolGetPropertyAsArray(\'measurementInfo\')[0].atoms[1].info)">javascript:alert(jmolGetPropertyAsArray(\'measurementInfo\')[0].atoms[1].info)</a>'


,'### measure ALL works across models ###'
	,'load cyclohexane_movie.xyz; frame 1; moveto 1.0 -681 416 602 82.7;'
	,'select (atomno=10,atomno=8); color yellow;'
	,'measure ALL (atomno=8) (atomno=2) (atomno=1) (atomno=10)'
        ,'frame next'
        ,'frame prev'
        ,'frame play'
        ,'frame playrev'
	,'measure DELETE ALL (atomno=8) (atomno=2) (atomno=1) (atomno=10)'


,'### set measureAllModels ###'
	,'# this flag generates measures in all models when only one is measured'
	,'# It is a bit different in action from the ALL keyword in that it still only acts on the first occurance of a particular set WITHIN a given model'
	,'set measureAllModels ON'
	,'load cyclohexane_movie.xyz; frame 1; moveto 1.0 -681 416 602 82.7;'
	,'# now make a measurement or'
	,'measure (atomno=3 and visible) (atomno=5 and visible)'
	,'show measurements'
	,'# note that this script is otherwise interpreted as "the first occurance of", typically "in the first model" regardless of which model is visible. Adding "and visible" makes it clear that you want to see a result regardless of the setting of measureAllModels.'
	,'# the above toggles, because only two atoms are indicated'
	,'frame 1'
        ,'frame next'
        ,'frame prev'
	,'measure DELETE (atomno=3 and visible) (atomno=5 and visible)'
	,'show measurements'
	,'set measureAllModels OFF'
	,'frame 6; measure (atomno=3 and */6) (atomno=4 and */6)'
	,'frame 8; measure (atomno=3 and visible) (atomno=6 and visible)'
	,'frame 1'
	,'frame 6'
	,'frame 8'
        ,'frame play'
        ,'frame playrev'
	,'measures off'
	,'# note that the measures are still there, just not displaying after "measures off"'
	,'show measurements'
,' <a href=javascript:dotest(-1)>[appletInfo]</a>'
 +' <a href=javascript:dotest(-2)>[animationInfo]</a>'
 +' <a href=javascript:dotest(0)>[fileName]</a>'
 +' <a href=javascript:dotest(1)>[fileHeader]</a>'
 +' <a href=javascript:dotest(2)>[fileContents]</a>'
 +'<br><a href=javascript:dotest(8.1)>[atomList]</a>'
 +' <a href=javascript:dotest(8)>[atomInfo]</a>'
 +' <a href=javascript:dotest(7)>[bondInfo]</a>'
 +" <a href=javascript:dotest(10)>[extractModel]</a>"
 +'<br><a href=javascript:dotest(3)>[orientationInfo]</a>'
 +' <a href=javascript:dotest(3.2)>[transformInfo]</a>'
 +' <a href=javascript:dotest(3.3)>[centerInfo]</a>'
 +' <a href=javascript:dotest(3.4)>[boundboxInfo]</a>'
 +' <a href=javascript:dotest(3.5)></a>'
 +"<br><a href=javascript:dotest(4)>[modelInfo]</a>"
 +" <a href=javascript:dotest(4.2)>[polymerInfo]</a>"
 +" <a href=javascript:dotest(4.3)>[chainInfo]</a>"
 +" <a href=javascript:dotest(4.4)>[shapeInfo]</a>"
 +" <a href=javascript:dotest(4.45)>[measurementInfo]</a>"
 +"<br><a href=javascript:dotest(4.5)>[stateInfo]</a>"
 +" <a href=javascript:dotest(9)>[reload THIS orientation]</a>"
 +"<br><br>"
// +" <a href=javascript:dotest(11)>[jmolStatus]</a>"
// +" monitor: "
// +getCheckList()
//," JSON data returned:<br><textarea name=outputJSON id=outputJSON rows=5 cols=50></textarea>"
," <input type=checkbox name=idecode id=idecode checked=1>Decoded: <a href=javascript:showoutput()>new window</a><br><textarea name=output id=output rows=5 cols=60 wrap=off></textarea>"
)
remarks=""
//]]>
what="visible"
whatp="centerInfo"
whatm=""
function xshowoutput(s){ if(!s) s=document.getElementById("output").value; dowritenew("<pre>"+s+"</pre>") };function oldshowoutput(){
 dowritenew("<pre>"+document.getElementById("output").value+"</pre>")
}
function dotest(iwhat){
 if(iwhat!=3)monitoron=false
 var s=""
 var sJSON=""
 var info=""
 var sinfo=""
 var sparam=""
 var str=""
 if(iwhat==-1){
   sinfo="appletInfo"
 }else if(iwhat==-2){
   sinfo="animationInfo"
 }else if(iwhat==0){
   str="fileName"
 }else if(iwhat==1){
   str="fileHeader"
   info = jmolGetPropertyAsString(sinfo)
 }else if(iwhat==2){
   str="fileContents"
 }else if(iwhat==3){
   sinfo="orientationInfo"
 }else if(iwhat==3.2){
   sinfo="transformInfo"
 }else if(iwhat==3.3){
   sinfo="centerInfo"
 }else if(iwhat==3.4){
   sinfo="boundboxInfo"
 }else if(iwhat==3.5){
   sinfo="zoomInfo"
 }else if(iwhat==4){
   sinfo="modelInfo"
 }else if(iwhat==4.2){
   sparam="PROMPT"
   sinfo="polymerInfo"
 }else if(iwhat==4.3){
   sparam="PROMPT"
   sinfo="chainInfo"
 }else if(iwhat==4.4){
   sinfo="shapeInfo"
 }else if(iwhat==4.45){
   sinfo="measurementInfo"
 }else if(iwhat==4.5){
   sparam="visible"
   sinfo="stateInfo"
 }else if(iwhat==7){
   sparam="PROMPT"
   sinfo="bondInfo"
 }else if(iwhat==8){
   sparam="PROMPT"
   sinfo="atomInfo"
 }else if(iwhat==8.1){
   sparam="PROMPT"
   sinfo="atomList"
 }else if(iwhat==9){
   info = jmolGetPropertyAsArray("orientationInfo")
   s="load "+jmolGetPropertyAsString("fileName")+";"+info.moveTo
   document.getElementById("cmd").value=s
   jmolScript(s)
 }else if(iwhat==10){
   s=prompt("enter an atom expression",what)
   if(!s)return
   what=s
   s = jmolGetPropertyAsString("extractModel",what)
   var A=jmolGetPropertyAsArray("orientationInfo")
   showoutput(s);   jmolLoadInlineScript(s,A.moveTo)
 }else if(iwhat==11){
   whatm=getCallbackOptions()
   var A=jmolGetStatus(whatm)
   parseMessages(A)
   setTimeout("dotest(11)",delayms0)
   return
 }
 if(str!=""){
   s=jmolGetPropertyAsString(str)
 }else if(sinfo!=""){
   if(sparam == "PROMPT"){
     s=prompt("enter an atom expression",what)
     if(!s)return
     what=s
     sparam=what
   }
   if(document.getElementById("idecode").checked){
	s=jmolGetPropertyAsArray(sinfo,sparam)
	s=_jmolEnumerateObject(s,sinfo)
   }else{
	s=jmolGetPropertyAsJSON(sinfo,sparam)
   }
 }
 if(s!="")document.getElementById("output").value=s
}
function parseMessages(A){
 if(!A)return
 var s=""
 for(var i=A.length-1;i>=0;i--){
	s=A[i][3]+"\n"+s
	showmsg("msg",A[i])
 }
 document.getElementById("output").value=s
}
monitoron=0
function domonitor(isiter){
  if(!isiter)monitoron=!monitoron
  if(!monitoron)return
  dotest(3)
  setTimeout("domonitor(1)",delayms)  
}
</script>
</head>
<body onload = "setTimeout('dotest(11)',delayms0)">
<script type="text/javascript">showpage(0)</script></body>
</html>

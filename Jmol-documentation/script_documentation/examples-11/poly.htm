<html>
<head>
<title>Jmol Interactive Examples</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="stylesheet" type="text/css" href="styles.css" />
<script type="text/javascript" src="Jmol.js"></script>
<script type="text/javascript" src="new.js"></script>
<script type="text/javascript">
//<![CDATA[
title="ATOMS";model="NaCl.mol; "
+"connect 3.0 (*);select chlorine;polyhedra collapsed 6 edges;"
+"color polyhedra yellow;"
+"select *;spacefill 0; wireframe 0;"
+"select connected(6);spacefill 0.5;spin on"


messagecallback=""
animcallback=""
pickcallback=""
loadstructcallback=""

delayms = 100; delayms0 = 10000000


Callbacks=new Array("-atomPicked","fileLoaded","fileLoadError","-frameChanged","-measurePending","-measureCompleted","-measurePicked","-scriptStarted","-scriptEcho","scriptStatus","scriptError","scriptMessage", "scriptTerminated","-userAction","-viewerRefreshed","-newOrientation")

function loadModel(value){
 if (arguments.length==0) {
   d = document.getElementById("modellist")
   if(!d)return
   value = d[d.selectedIndex].value
 }
 var i = parseInt(""+value)
 if (i<1)return
 showscript(0,0,"load "+Models[i].toLowerCase()+"; polyhedra bonds (not (carbon or oxygen or nitrogen)) collapsed edges;spin y 10;spin x 10;spin on") 
}


function getCheckList(){
 var s=""
 var skey=""
 var ischecked=0
 for(var i=0;i<Callbacks.length;i++){
	skey=Callbacks[i]
	ischecked=(skey.charAt(0)!="-")
	Callbacks[i]=skey=skey.replace(/\-/,"")
	s+=" <label><input type=checkbox id='"+skey+"'"+(ischecked?" checked=1":"")+">"+skey+"</label>"
	if((i+1)%4==0)s+="<br>"
 }
 s+=" <a href=javascript:setOptions(1)>all</a> <a href=javascript:setOptions(0)>none</a> "
 return s
}

function getCallbackOptions(){
 var s="monitoring:"
 for(var i=0;i<Callbacks.length;i++)if(document.getElementById(Callbacks[i]).checked)s+=Callbacks[i]
 return s
}


function setOptions(all_or_none){
 for(var i=0;i<Callbacks.length;i++)document.getElementById(Callbacks[i]).checked = all_or_none
}

Scripts=new Array(" "
,' <br/><br/>This prototype file demonstrates the new "collapsed" idea for polyhedra and the new select connected() idea. '
,'### connect and polyhedra ###'
	,'load NaCl.mol; select *'
	,'polyhedra 6 3.0 (chlorine) to (sodium) collapsed edges;'
	,'connect 3.0 (*)'
	,'polyhedra 6 (chlorine) collapsed edges; color polyhedra yellow'
	,'select *; wireframe off; spacefill off;'
	,'select connected(6); spacefill 0.5;'

,'### combining with draw objects ###'
	,'load quartz.mol'
	,'draw line1 150 (atomno=2) (atomno=17)'
	,'spin internal $line1 30'
	,'spin off'
	,'polyhedra 4 (silicon) to (oxygen) collapsed edges'
	,'polyhedra 4;color polyhedra red'
	,'polyhedra edges;'
	,'load P4O10.mol;polyhedra 4 collapsed edges'
	,'draw line2 150 (atomno=2 or atomno=11 or atomno=3) (atomno=13)'
	,'spin internal $line2'
	,'spin off'

,'### faceCenterOffset for collapsed polyhedra ###'
	,'load ZNQUKROD.mol;'
	,'select zinc;polyhedra bonds flat edges;'
	,'select zinc;polyhedra bonds collapsed edges;'
	,'select carbon;polyhedra bonds faceCenterOffset 0.4 collapsed edges;'
	,'draw line2 150 (atomno=40) (atomno=35)'
	,'spin internal $line2'
	,'spin off'
	,'load TCBEWREA.mol'
	,'select not nitrogen;polyhedra bonds faceCenterOffset 0.0 collapsed edges'
	,'select not nitrogen;polyhedra bonds faceCenterOffset 0.25 collapsed edges'
	,'select not nitrogen;polyhedra bonds faceCenterOffset 0.5 collapsed edges'
	,'select not nitrogen;polyhedra bonds faceCenterOffset 0.9 collapsed edges'
	,'select not nitrogen;polyhedra bonds 	faceCenterOffset 1.2 collapsed edges'

,'### polyhedra extending beyond the unit cell ###'
	,'# first we load nine unit cells'
	,'load "y1237.cif" {3 3 3}'
	,'# we restrict ourselves to just the center cell -- note, these numbers can be fractional'
	,'restrict cell={2 2 2};'
	,'# we offset the unit cell to the origin of this central cell and display it'
	,'set unitcell {1 1 1};axes off;color unitcell white;center visible;moveto 1.0 -971 195 138 78.9 225;'
	,'# some connection adjustments first'
	,'connect (copper) (copper) delete;'
	,'connect (yttrium) (*) delete;'
	,'# now we draw the polyhedra just to what is visible and connected the way we want'
	,'polyhedra bonds  (copper and (connected(4) or connected(5)) and visible)'
	,'# and we hide the bonds. Voila!'
	,'select *;wireframe 0;'
	,'# finally, if we wish, we can close that final side:'
	,'polyhedra bonds (copper and (connected(4) or connected(5)) and visible) distanceFactor 2.0'
	,'# fractional offset, same idea:'
	,'load "y1237.cif" {2 2 2};restrict cell={1.5 1.5 1.5};set unitcell {1/2 1/2 1/2};axes off;color unitcell white;center visible;moveto 1.0 -971 195 138 78.9 175;'
	,'connect (copper) (copper) delete;connect (yttrium) (*) delete;'
	,'polyhedra bonds  (copper and (connected(4) or connected(5)) and visible)'
	,'select *;wireframe 0;'



 ,' <a href=javascript:dotest(-1)>[appletInfo]</a>'
 +' <a href=javascript:dotest(-2)>[animationInfo]</a>'
 +' <a href=javascript:dotest(0)>[fileName]</a>'
 +' <a href=javascript:dotest(1)>[fileHeader]</a>'
 +' <a href=javascript:dotest(2)>[fileContents]</a>'
 +'<br><a href=javascript:dotest(8.1)>[atomList]</a>'
 +' <a href=javascript:dotest(8)>[atomInfo]</a>'
 +' <a href=javascript:dotest(7)>[bondInfo]</a>'
 +" <a href=javascript:dotest(10)>[extractModel]</a>"
 +'<br><a href=javascript:dotest(3)>[orientationInfo]</a>'
 +' <a href=javascript:dotest(3.2)>[transformInfo]</a>'
 +' <a href=javascript:dotest(3.3)>[centerInfo]</a>'
 +' <a href=javascript:dotest(3.4)>[boundboxInfo]</a>'
 +' <a href=javascript:dotest(3.5)>[zoomInfo]</a>'
 +"<br><a href=javascript:dotest(4)>[modelInfo]</a>"
 +" <a href=javascript:dotest(4.2)>[polymerInfo]</a>"
 +" <a href=javascript:dotest(4.3)>[chainInfo]</a>"
 +" <a href=javascript:dotest(4.4)>[shapeInfo]</a>"
 +" <a href=javascript:dotest(4.5)>[stateInfo]</a>"
 +" <a href=javascript:dotest(9)>[reload THIS orientation]</a>"
 +"<br><br>"
// +" <a href=javascript:dotest(11)>[jmolStatus]</a>"
 +" monitor: "
 +getCheckList()


//," JSON data returned:<br><textarea name=outputJSON id=outputJSON rows=5 cols=50></textarea>"
," <input type=checkbox name=idecode id=idecode checked=1>Decoded: <a href=javascript:showoutput()>new window</a><br><textarea name=output id=output rows=5 cols=60 wrap=off></textarea>"
)
remarks=""
//]]>

what="visible"
whatp="centerInfo"
whatm=""

function xshowoutput(s){ if(!s) s=document.getElementById("output").value; dowritenew("<pre>"+s+"</pre>") };function oldshowoutput(){
 dowritenew("<pre>"+document.getElementById("output").value+"</pre>")
}

function dotest(iwhat){
 if(iwhat!=3)monitoron=false
 var s=""
 var sJSON=""
 var info=""
 var sinfo=""
 var sparam=""
 var str=""
 if(iwhat==-1){
   sinfo="appletInfo"
 }else if(iwhat==-2){
   sinfo="animationInfo"
 }else if(iwhat==0){
   str="fileName"
 }else if(iwhat==1){
   str="fileHeader"
   info = jmolGetPropertyAsString(sinfo)
 }else if(iwhat==2){
   str="fileContents"
 }else if(iwhat==3){
   sinfo="orientationInfo"
 }else if(iwhat==3.2){
   sinfo="transformInfo"
 }else if(iwhat==3.3){
   sinfo="centerInfo"
 }else if(iwhat==3.4){
   sinfo="boundboxInfo"
 }else if(iwhat==3.5){
   sinfo="zoomInfo"
 }else if(iwhat==4){
   sinfo="modelInfo"
 }else if(iwhat==4.2){
   sparam="PROMPT"
   sinfo="polymerInfo"
 }else if(iwhat==4.3){
   sparam="PROMPT"
   sinfo="chainInfo"
 }else if(iwhat==4.4){
   sinfo="shapeInfo"
 }else if(iwhat==4.5){
   sparam="visible"
   sinfo="stateInfo"
 }else if(iwhat==7){
   sparam="PROMPT"
   sinfo="bondInfo"
 }else if(iwhat==8){
   sparam="PROMPT"
   sinfo="atomInfo"
 }else if(iwhat==8.1){
   sparam="PROMPT"
   sinfo="atomList"
 }else if(iwhat==9){
   info = jmolGetPropertyAsArray("orientationInfo")
   s="load "+jmolGetPropertyAsString("fileName")+";"+info.moveTo
   document.getElementById("cmd").value=s
   jmolScript(s)
 }else if(iwhat==10){
   s=prompt("enter an atom expression",what)
   if(!s)return
   what=s
   s = jmolGetPropertyAsString("extractModel",what)
   var A=jmolGetPropertyAsArray("orientationInfo")
   showoutput(s);   jmolLoadInlineScript(s,A.moveTo)
 }else if(iwhat==11){
   whatm=getCallbackOptions()
   var A=jmolGetStatus(whatm)
   parseMessages(A)
   setTimeout("dotest(11)",delayms)
   return
 }
 if(str!=""){
   s=jmolGetPropertyAsString(str)
 }else if(sinfo!=""){
   if(sparam == "PROMPT"){
     s=prompt("enter an atom expression",what)
     if(!s)return
     what=s
     sparam=what
   }
   if(document.getElementById("idecode").checked){
	s=jmolGetPropertyAsArray(sinfo,sparam)
	s=_jmolEnumerateObject(s,sinfo)
   }else{
	s=jmolGetPropertyAsJSON(sinfo,sparam)
   }
 }
 if(s!="")document.getElementById("output").value=s
}

function parseMessages(A){
 if(!A)return
 var s=""
 for(var i=A.length-1;i>=0;i--){
	s=A[i][3]+"\n"+s
	showmsg("msg",A[i])
 }
 document.getElementById("output").value=s
}

monitoron=0
function domonitor(isiter){
  if(!isiter)monitoron=!monitoron
  if(!monitoron)return
  dotest(3)
  setTimeout("domonitor(1)",delayms)  
}

</script>
</head>
<body onload = "setTimeout('dotest(11)',delayms0)">
<script type="text/javascript">showpage(0)</script></body>
</html>

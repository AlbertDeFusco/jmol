<html>
<head>
<title>Jmol Interactive Examples</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="stylesheet" type="text/css" href="styles.css" />
<script type="text/javascript" src="Jmol.js"></script>
<script type="text/javascript" src="new.js"></script>
<script type="text/javascript">


//logLevel=0  // 4 is standard ;1 gives fatal errors only; 2 gives all errors;
              // 3 gives errors and warnings; 4 gives errors, warnings and information; 5 adds debug.

//<![CDATA[
title="ATOMS";model=';set echo top left;echo loading quartz.cif...;delay 1;load "quartz.cif" {1 1 1};message done'
docsearch = document.location.search.substring(1)
if(docsearch.indexOf("model=")>=0)model=unescape(docsearch.split("model=")[1].split("&")[0])

latestVersion = '### Be sure you have the <a href=http://jmol.sourceforge.net/files>Latest version</a> ###'


messagecallback="showmsg"
animcallback=""
pickcallback=""
loadstructcallback=""

delayms = 100; delayms0 = 1000
polling = false;

Callbacks=new Array("-atomPicked","-fileLoaded","-fileLoadError","-frameChanged","-measurePending","-measureCompleted","-measurePicked","-scriptStarted","-scriptEcho","-scriptStatus","-scriptError","-scriptMessage", "-scriptTerminated","-userAction","-viewerRefreshed","-newOrientation")

function getCheckList(){
 var s=""
 var skey=""
 var ischecked=0
 for(var i=0;i<Callbacks.length;i++){
	skey=Callbacks[i]
	ischecked=(skey.charAt(0)!="-")
	if(ischecked)polling=true;
	Callbacks[i]=skey=skey.replace(/\-/,"")
	s+=" <label><input type=checkbox onclick=getCallbackOptions() id='"+skey+"'"+(ischecked?" checked=1":"")+">"+skey+"</label>"
	if((i+1)%4==0)s+="<br>"
 }
 s+=" <a href=javascript:setOptions(1)>all</a> <a href=javascript:setOptions(0)>none</a> "
 return s
}


function getSymmetryOperations() {
 var info = jmolGetPropertyAsArray("auxiliaryInfo").models[0].symmetryOperations
 document.getElementById("symmetryOps").innerHTML = info.join("<br>")
}


Scripts=new Array(" "
,' This page lists all new features introduced between <a href=../examples-10.2/new.htm>Jmol 10.2</a> and Jmol 11.0. Another file lists recent "bleeding edge" developments planned for <a href=new.htm>Jmol 11.2</a>'

,latestVersion

,'### Some crystallographic-related Jmol capabilities are highlighted here. These have been culled from <a href=new0.htm>new0.htm</a> (Jmol 11.0) and <a href=new.htm>new.htm</a> (Jmol 11.1). ###'

,'### using load append to add symmetry operations ###'
,'# Jmol 11.1.40 adds the capability to combine <b>load append ... </b> with <b>load "filename.cif" {555 555 0} spacegroup "x,y,z"</b> to good effect.'
,'load "quartz.cif" {555 555 0} spacegroup "-x,-y,z"'
,'set appendnew false;load "quartz.cif" {555 555 0} spacegroup "-x,-y,z";load append "" {555 555 0} spacegroup "-x,1-y,z";zoomto 1.0 50'

,'### determining the symmetry operations for a file ###'
,'# Using a simple <a href=javascript:alert(getSymmetryOperations)>JavaScript method</a>, you can determine the symmetry operations for a loaded file.'
,' <div id=symmetryOps></div> <a href=javascript:getSymmetryOperations()>get symmetry operations</a>'

,'### color axis1 and showAxes = true ###'
,'# Jmol 11.1.20 enables differential coloring of axes. In addition, a change relative to Jmol 11.0 is that these colorations persist past file loading -- they are more like background than actual model-associated objects. You can turn axes off and on without clearing their diameter or color using <b>showAxes = TRUE</b> or <b>showAxes = false</b>.'
,'load quartz.cif {1 1 1};rotate x 30'
,'color axis1 purple'
,'color axis2 [xFFFF00];axes 0.1'
,'showAxes = false'
,'showAxes = true'
,'color axis3 [200,100,50]'
,'load caffeine.xyz;axes molecular;axes on'
,'color axes red'


,'### select within(x.x,plane,$plane) ###'
,'# Jmol 11.1.12 introduces a new way to select atoms based on distance from a plane. The plane can be defined most easily by a set of atoms using draw, then used to display a subset of the atoms. The sign of the distance value for "within" determines which side of the plane is being referred to. This is best determined by experimentation. '
,'load gold.cif {5 5 5};moveto /* time, axisAngle */ 1.0 { 329 816 -476 154.9} /* zoom, translation */  100.0 0.0 0.0  /* center, rotationRadius */ {10.196499 10.1965 9.176849} 18.8;'
,'display within(0,plane,@{plane({atomno=1},{atomno=2},{atomno=3 or atomno=4})}) # plane defined using three-point embedded expressions'
,'display within(0,plane,@{plane({0 0 0},{1/2 0 1/2},{0 1/2 1/2})})  # plane defined using fractional coordinates'
,'display within(0,plane,@{plane({0 0 0},{1 1 1},{atomno=3 or atomno=4})}) # plane defined using a combination of coordinates and atoms'
,'draw plane1 (atomno=1) (atomno=2) (atomno=6)'
,'draw plane2 (atomno=1) (atomno=6) (atomno=5)'
,'draw plane3 (atomno=1) (atomno=2) (atomno=5)'
,'draw plane4 (atomno=513) (atomno=532) (atomno=429)'
,'display within(plane,$plane1)'
,'display within(-999,plane,$plane1)'
,'display within(999,plane,$plane1)'
,'display within(999,plane,$plane1) and within(999,plane,$plane2) and within(-999,plane,$plane3)'
,'display within(999,plane,$plane1) and within(999,plane,$plane2) and within(-999,plane,$plane3) and within(-999,plane,$plane4)'
,'draw off # we don\'t need to see the planes, just use them'
,'axes off;unitcell off'
,'select *;spacefill 1.45'
,'moveto /* time, axisAngle */ 1.0 { -180 497 -849 149.7} /* zoom, translation */  100.0 -6.0 15.1  /* center, rotationRadius */ {10.196499 10.1965 9.176849} 18.8;'
,'select not displayed;color translucent white;display (atomx < 20 && atomy < 20)'
,'# using Miller indices:'
,'load gold.cif {3 3 3};spacefill 1.45;moveto /* time, axisAngle */ 3.0 { -691 507 -515 173.7} /* zoom, translation */  132.8 0.4 33.4  /* center, rotationRadius */ {6.1178994 6.1179 5.09825} 11.7;'
,'display within(4.0,atomno=68)'
,'center displayed'
,'select within(hkl,{1/4,1/4,1/4});color red;'
,'select within(hkl,{1/3,1/3,1/3});color translucent gold;'
,'select within(hkl,{1/2,1/2,1/2});color white;'
,'moveto /* time, axisAngle */ 1.0 { -283 932 -225 133.0} /* zoom, translation */  209.0 0.0 0.0  /* center, rotationRadius */ {4.0785995 4.0785995 4.0786} 13.6;'


,'### load {ijk i\'j\'k\' 1|0} ###'
,'# Jmol 10.9.77 adds the capability to load a wider range of unit cell blocks. The range should include 555 (the base unit cell). The third parameter, 0 or 1, indicates whether(1) or not(0) to "normalize" the symmetry operations by moving the geometric center of the generated set of atoms back into unit cell 555.'
,'load quartz.cif {444 666 1} # 27 cells'
,'load quartz.cif {555 555 1} # just one cell'
,'load quartz.cif {555 555 0} # just one cell; # without normalizing'

,'###select clickable -- oblique slabbing ###'
,'# Jmol 10.9.71 allows you to select the currently clickable atoms. In conjunction with slabbing, this means that you can now select for just those atoms that are within the depth/slab range. A later <b>slab off; restrict selected</b> now allows you to manipulate the model <i>with that particular slab maintained</i>. Be sure to do a <b>refresh</b> just before selecting.'
,'load 2ptn.cif;delay 2;slab 35;slab on;refresh;select not clickable;spacefill off;color translucent grey;slab off;delay 2;moveto 3.0 -976 76 204 77.4 100; # cool, eh?'


,'###isosurface hkl -- planar slices using <a href=http://www.chem.qmul.ac.uk/surfaces/scc/scat1_1b.htm>Miller indices</a><br><img src=img/xtalslice.jpg width=100 height=100 />###'
,'# Jmol 10.9.72 introduces the "hkl" keyword indicates that the next three numbers in braces are Miller indices. Note that all coordinates are implicitly fractional. A faster alternative is to use "solvent 0" instead of "molecular".'
,'load nacl.cif {2 2 2};axes 0.2;boundbox on;moveto 1.0 -402 -582 -706 127;delay 1;restrict none;'
,'select *;isosurface delete hkl {1 1 1} resolution 4 solvent 0;'
,'select *;isosurface delete hkl {1/2 1/2 1/2} resolution 4 solvent 0;'
,'select *;isosurface delete hkl {1 1 0} resolution 4 solvent 0;'
,'select *;isosurface delete hkl {1 0 1} resolution 4 solvent 0;'
,'select *;isosurface delete hkl {1 0 0} resolution 4 solvent 0;'

,'###select symop=nijk ###'
,'# Jmol 10.9.71/79 allows you to select the exact lattice translation for a given symmetry operation. The reference point is the untransformed, untranslated file atoms - Jones-Faithful x,y,z - which are always designated n555.'
,'load maleic.cif 7 {2 1 1};moveto 1.0 -995 89 43 71.8;selectionHalos on;select none;'
,'select symop=1'
,'select symop=2'
,'select symop=3'
,'# The extension to lattice translations is to move the symmetry operation number over three digits and add the selected translation ijk:'
,'select symop=1555'
,'select symop=1655'
,'select symop=2555'
,'select symop=2655'
,'select symop=3555'
,'select symop=3655'
,'select symop=4555'
,'select symop=4655'
,'# Note that you can use other comparisons -- !=, &lt;, >, &lt;=, and >=. If you use any of these comparisons with a simple symmetry operation, the usual comparison will be returned. If you use this new nijk syntax, then the atom must match the given symmetry operation; the comparison is ONLY for the ijk part.' 
,'select symop>1555'
,'# Note that the following two are not the same:' 
,'select symop!=2555'
,'select not symop=2555'
,'### translateSelected ###'
,'# Jmol 10.9.57 includes the ability to move atoms relative to each other.'
,'load "team0104a.ccdc.cif" {1 1 1};moveto 0  -689 -707 -161 145.1 60;'
,'select symop = 1;color white'
,'translateSelected {0 -1/1 0}'
,'translateSelected {0 1/1 0}'



,'### space groups for mmCIF, XYZ, and MOL files ###'
,'# Jmol 10.9.55 extends spacegroup and unitcell capabilities to standard XYZ, mmCIF, and MOL files. Coordinates are not fractional in these files, so the presumption is that we have the final Cartesian coordinates, but we want to "reverse engineer" the system and see how that molecule packs in its crystal. For this we have to have some additional information of spacegroup and unitcell.'
,'load "caffeine.xyz" {1 1 2} spacegroup "P 4" unitcell {10 10 10 90 90 90}'

,'### space groups for PDB files ###'
,'# Jmol 10.9.54 adds the capability to explore space groups and molecular packing of proteins in PDB files. This opens the door also for the same using any Cartesian-coordinate file, provided unit cell and space group information are provided. At least for now it is possible with PDB files.'
,'load "1crn.pdb"'
,'load "1crn.pdb" {1 1 1}'
,'load "1crn.pdb" {1 2 1};select symop=1;color red'
,'load "1crn.pdb" {1 2 1} spacegroup "P 21:a"'
,'load "1crn.pdb" {1 2 1} spacegroup "P 21:b" # the real one ?'
,'load "1crn.pdb" {1 2 1} spacegroup "P 21:c"'
,'load "quartz.cif" {1 1 2};moveto 0.0 -999 38 -2 73.7;'
,'# You can also change the unit cell dimensions if you like:'
,'load "quartz.cif" {1 1 2} unitcell {6.00 6.00 6.00 90 90 120};moveto 0.0 -999 38 -2 73.7;'
,'# If you change both, change spacegroup first:'
,'load "quartz.cif" {1 1 2} spacegroup "P 32 2\'\'" unitcell {6.00 6.00 6.00 90 90 120};moveto 0.0 -999 38 -2 73.7;'
,'load "quartz.cif" {1 1 2} spacegroup "P 32 2\'\' (0 0 4)" unitcell {6.00 6.00 6.00 90 90 120};moveto 0.0 -999 38 -2 73.7;'


,'### new symop and specialPosition atom selection options, and label "%o" ###'
,'# Jmol 10.9.52 introduces <b>symop</b>, a means of selecting atoms based on which symmetry operator generated them.'
,'load "quartz.cif" {1 1 1}'
,'set display selected'
,'select symop=1'
,'select symop<3'
,'# To select just the original atoms before any symmetry was applied, use <b>select not symmetry</b>.'
,'select not symmetry'
,'# To select all special positions (positions that can be generated by more than one symmetry operation from the original set of atoms), use <b>select specialPosition</b>.'
,'select specialposition'
,'# To display the index of the symmetry operator that generated an atom, use %o in a label'
,'set display normal;select *;label "%o"'
,'# To display the operators in xyz notation, use <b>show symmetry</b>'
,'show symmetry'

,'### new space group capabilities ###'
,'# Jmol 10.9.51 adds the capability to read space group names (Hermann-Mauguin or <a href=http://cci.lbl.gov/sginfo/hall_symbols.html>Hall</a>) and from these to generate the set of operators. In the case of Hall symbols, this assignment is definitive; in the case of Hermann-Mauguin symbols, cell parameters are also used in order to identify the unique axis, but there still may be ambiguities in this case. The current implementation is for testing only -- some changes should be expected. To indicate 2", use a pair of single quotes: 2\'\'. In addition, you can supply a desired space group name with a file to specify that you want to override the space group indicated in the CIF file.' 
,'load "team0104a.ccdc.cif" {1 1 1}'
,'# without qualifiers, "show spacegroup" interprets the name of the spacegroup given in the file. Note that this may not be consistent with the operators used to calculate the atom positions if those are explicitly given in the CIF or RES file. Jmol will only use the space group name to generate operators if they are not otherwise given in the file.'
,'show spacegroup'
,'# Hermann-Mauguin symbols can be shown:' 
,'show spacegroup "Pmmn"'
,'# any arbitrary Hall symbol can be shown:'
,'show spacegroup "P 32 2\'\' (0 0 4)"'
,'# In 10.9.52 you can instuct Jmol to ignore CIF file-derived operators and force name-derived operator generation:'
,'load "team0104a.ccdc.cif" {1 1 1} spacegroup "ignoreOperators"'
,'# In 10.9.52 you can load a file and script what spacegroup to use, overriding the spacegroup indicated in the file itself. No check is done to ensure that the chosen space group is compatible with the cell dimensions. The "space group" can just be a list of x,y,z operators.'
,'load "team0104a.ccdc.cif" {1 1 1} spacegroup "Pmmm";rotate y 90; show spacegroup'
,'load "team0104a.ccdc.cif" {1 1 1} spacegroup "P21/m";rotate y 90; show spacegroup'
,'load "team0104a.ccdc.cif" {1 1 1} spacegroup "P21/c";rotate y 90; show spacegroup;centerAt absolute {1/2 1/2 1/2};set scale3d 6.0;'
,'load "team0104a.ccdc.cif" {1 1 1} spacegroup "-x,y+1/2,-z+1/2";rotate y 90;;centerAt absolute {1/2 1/2 1/2};set scale3d 6.0;'
,'load "team0104a.ccdc.cif" {1 1 1} spacegroup "-x,-y,-z";rotate y 90;centerAt absolute {1/2 1/2 1/2};set scale3d 6.0;'
,'load "team0104a.ccdc.cif" {1 1 1} spacegroup "-x+1/2,y,z+1/2";rotate y 90;centerAt absolute {1/2 1/2 1/2};set scale3d 6.0;'



,'### AJAX-JS support ###'
,'# Jmol.js supports <a href="http://en.wikipedia.org/wiki/Ajax_%28programming%29" target=_blank>Asynchronous JavaScript</a>, allowing web developers to create pages that draw from any molecular data resource on the web. To use this service, nothing more than Jmol.js is require. No server-side application is needed. Currently the both of the two known AJAX-JS servers are supported -- one at St. Olaf College serving up RCSB biomolecular structures as well as just about any uncompressed structural model files anywhere on the web, and the American Mineralogical Society\'s AJAX mineral structure server at the University of Arizona.'

,'### new "select/restrict cell={i j k}" and "unitcell {i j k}" and better polyhedral rendering ###<br><img src=img/poly.jpg width=100 height=100>'
,'# Jmol 10.x.18 allows for the selection of specific unit cells. Coordinates such as {1.5 1.5 1.5} are allowed. In conjunction with this, "unitcell {i j k}" shifts the unit cell and the unit cell axes ("set axesUnitcell") to a new origin. See <a href=poly.htm>poly.htm</a>'


,'### new label formats ###'
,'# Jmol10.x introduces several new label format codes, including %A, %N, %S, %X, %Y, %Z.'
,'load 5hvp.cif;restrict *%1,*%2;color altloc;label %A  # alternate Location "%A"'
,'load "quartz.cif" {1 1 1};label %.2X %.2Y %.2Z # fractional coordinates "%X" "%Y" "%Z"'
,'load "AgFUPMOS.cif" {1 1 1};color molecule;label %N # molecule number "%N"'
,'load "AgFUPMOS.cif" {1 1 1};color molecule;select fluorine;label %S # crystallographic site "%S"'

,'### points, lines, and planes; specifying coordinates ###'
,'Jmol 10.x can now draw point, line, and triangular or rectangular planes based on single atom positions, group average positions, or specific molecular coordinates. see <a href=draw.htm>draw.htm</a>'

,'### fractional coordinates ###'
,'Jmol 10.x.03 introduces a way of specifying fractional coordinates: {1/2, 1/2, 1/2}. A "1" in the denominator is optional: {0.5/, 0.5/, 0.5/}, and in such cases only one slash is necessary: {0.5/, 0.5, 0.5} or {0.5, 0.5, 0.5/}. These may be used in defining the center, in creating draw objects, in defining rotation, spin, and moveto orientation axes, and positions of dipole moments. See <a href=fraction.htm>fraction.htm</a>'

,'### symmetry, unit cells, and multiple lattice reading ###'
,'Jmol 10.x now allows extensive reading of SHELX and CIF symmetry and lattice information. Multiple unit cells can be displayed. see <a href=sym.htm>sym.htm</a> and the <a href=http://fusion.stolaf.edu/chemistry/jmol/xtalx>Jmol Crystal Explorer</a>'

,'### getting information ###'
,'Jmol 10.x along with its associated new Jmol.js library now allows for the retrieval of a wide range of data related to the model. see <a href=vibrate.htm>vibrate.htm</a>, and try the bracketed links, below:'

 ,' <a href=javascript:dotest(-1)>[appletInfo]</a>'
 +' <a href=javascript:dotest(-2)>[animationInfo]</a>'
 +' <a href=javascript:dotest(0)>[fileName]</a>'
 +' <a href=javascript:dotest(1)>[fileHeader]</a>'
 +' <a href=javascript:dotest(2)>[fileContents]</a>'
 +'<br><a href=javascript:dotest(8.1)>[atomList]</a>'
 +' <a href=javascript:dotest(8)>[atomInfo]</a>'
 +' <a href=javascript:dotest(7)>[bondInfo]</a>'
 +' <a href=javascript:dotest(7.5)>[moleculeInfo]</a>'
 +" <a href=javascript:dotest(10)>[extractModel]</a>"
 +'<br><a href=javascript:dotest(3)>[orientationInfo]</a>'
 +' <a href=javascript:dotest(3.1)>[auxiliaryInfo]</a>'
 +' <a href=javascript:dotest(3.2)>[transformInfo]</a>'
 +' <a href=javascript:dotest(3.3)>[centerInfo]</a>'
 +' <a href=javascript:dotest(3.4)>[boundboxInfo]</a>'
 +"<br><a href=javascript:dotest(4)>[modelInfo]</a>"
 +" <a href=javascript:dotest(4.2)>[polymerInfo]</a>"
 +" <a href=javascript:dotest(4.3)>[chainInfo]</a>"
 +" <a href=javascript:dotest(4.4)>[shapeInfo]</a>"
 +" <a href=javascript:dotest(4.5)>[stateInfo]</a>"
 +" <a href=javascript:dotest(9)>[reload THIS orientation]</a>"
 +"<br><br>"

," <input  type=checkbox name=idecode id=idecode checked=1>Decoded: <a href=javascript:showoutput()>new window</a><br><textarea name=output id=output rows=5 cols=60 wrap=off></textarea>"
)
remarks=""
//]]>


function getCallbackOptions(){
 var s=""
 for(var i=0;i<Callbacks.length;i++)if(document.getElementById(Callbacks[i]).checked)s+=Callbacks[i]
 var waspolling = polling
 polling = (s!="")
 if(polling && !waspolling)pollApplet()
 return "monitoring:"+s
}

function pollApplet(){
   whatm=getCallbackOptions()
   if(!polling){
	document.title = ""
	return
   }
   document.title = (new Date())
   var A=jmolGetStatus(whatm)
   parseMessages(A)
   if(polling)setTimeout("pollApplet()",delayms)
}

function setOptions(all_or_none){
 for(var i=0;i<Callbacks.length;i++)document.getElementById(Callbacks[i]).checked = all_or_none
 polling = (all_or_none == 1) 
}


function test1() {
 jmolSetAtomCoordRelative(Math.floor(Math.random()*6),Math.random()/5-0.1,Math.random()/5-0.1,Math.random()/5-0.1)
 jmolScriptWait("refresh")
}

function fire(i0,n){
 for(var i=0; i < n; i++) {
   //alert(Scripts[i0+i]);
   jmolScript(Scripts[i0+i]);
 }
}


what="visible"
whatp="centerInfo"
whatm=""

function xshowoutput(s){ if(!s) s=document.getElementById("output").value; dowritenew("<pre>"+s+"</pre>") };function oldshowoutput(){
 dowritenew("<pre>"+document.getElementById("output").value+"</pre>")
}

function dotest(iwhat){
 if(iwhat!=3)monitoron=false
 var s=""
 var sJSON=""
 var info=""
 var sinfo=""
 var sparam=""
 var str=""
 if(iwhat==-1){
   sinfo="appletInfo"
 }else if(iwhat==-2){
   sinfo="animationInfo"
 }else if(iwhat==0){
   str="fileName"
 }else if(iwhat==1){
   str="fileHeader"
   info = jmolGetPropertyAsString(sinfo)
 }else if(iwhat==2){
   str="fileContents"
 }else if(iwhat==3){
   sinfo="orientationInfo"
 }else if(iwhat==3.1){
   sinfo="auxiliaryInfo"
 }else if(iwhat==3.2){
   sinfo="transformInfo"
 }else if(iwhat==3.3){
   sinfo="centerInfo"
 }else if(iwhat==3.4){
   sinfo="boundboxInfo"
 }else if(iwhat==3.5){
   sinfo="zoomInfo"
 }else if(iwhat==4){
   sinfo="modelInfo"
 }else if(iwhat==4.2){
   sparam="PROMPT"
   sinfo="polymerInfo"
 }else if(iwhat==4.3){
   sparam="PROMPT"
   sinfo="chainInfo"
 }else if(iwhat==4.4){
   sinfo="shapeInfo"
 }else if(iwhat==4.5){
   sparam="visible"
   sinfo="stateInfo"
 }else if(iwhat==7){
   sparam="PROMPT"
   sinfo="bondInfo"
 }else if(iwhat==7.5){
   sparam="PROMPT"
   sinfo="moleculeInfo"
 }else if(iwhat==8){
   sparam="PROMPT"
   sinfo="atomInfo"
 }else if(iwhat==8.1){
   sparam="PROMPT"
   sinfo="atomList"
 }else if(iwhat==9){
   info = jmolGetPropertyAsArray("orientationInfo")
   s="load "+jmolGetPropertyAsString("fileName")+";"+info.moveTo
   document.getElementById("cmd").value=s
   jmolScript(s)
 }else if(iwhat==10){
   s=prompt("enter an atom expression",what)
   if(!s)return
   what=s
   s = jmolGetPropertyAsString("extractModel",what)
   var A=jmolGetPropertyAsArray("orientationInfo")
   showoutput(s);   jmolLoadInlineScript(s,A.moveTo)
 }
 if(str!=""){
   s=jmolGetPropertyAsString(str)
 }else if(sinfo!=""){
   if(sparam == "PROMPT"){
     s=prompt("enter an atom expression",what)
     if(!s)return
     what=s
     sparam=what
   }
   if(document.getElementById("idecode").checked){
	s=jmolGetPropertyAsArray(sinfo,sparam)
	s=_jmolEnumerateObject(s,sinfo)
   }else{
	s=jmolGetPropertyAsJSON(sinfo,sparam)
   }
 }
 if(s!="")document.getElementById("output").value=s
}

function parseMessages(A){
 if(!A)return
 var s=""
 for(var i=A.length-1;i>=0;i--){
	s=A[i][3]+"\n"+s
	showmsg("msg",A[i])
 }
 document.getElementById("output").value=s
}

monitoron=0
function domonitor(isiter){
  if(!isiter)monitoron=!monitoron
  if(!monitoron)return
  dotest(3)
  setTimeout("domonitor(1)",delayms)  
}

</script>
</head>
<body>
<script type="text/javascript">showpage(0)</script></body>
</html>

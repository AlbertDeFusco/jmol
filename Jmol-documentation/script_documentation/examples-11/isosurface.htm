<html>
<head>
<title>Jmol Interactive Examples</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="stylesheet" type="text/css" href="styles.css" />
<script type="text/javascript" src="Jmol.js"></script>
<script type="text/javascript" src="new.js"></script>
<script type="text/javascript">
//<![CDATA[
title="ATOMS";model='ch3cl_map.jvxl; set perspectivedepth off;moveto 1 345 456 567 49;set scriptQueue on;set loglevel 4'
docsearch = document.location.search.substring(1)
if(docsearch.indexOf("model=")>=0)model=unescape(docsearch.split("model=")[1].split("&")[0])
iscript = (docsearch.indexOf("scriptno=")>=0 ? parseInt(docsearch.split("scriptno=")[1].split("&")[0]) : 0)


messagecallback="showmsg"
animcallback=""
pickcallback=""
loadstructcallback=""

delayms = 100; delayms0 = 1000
polling = false;

Callbacks=new Array("-atomPicked","-fileLoaded","-fileLoadError","-frameChanged","-measurePending","-measureCompleted","-measurePicked","-scriptStarted","-scriptEcho","-scriptStatus","-scriptError","-scriptMessage", "-scriptTerminated","-userAction","-viewerRefreshed","-newOrientation")

x0 = 0
y0 = 0
dx = 1
dy = 1
x = 0
y = 0

function curveXY(app, ix, iy) {
 setXY(ix, iy)
 return eval(myfunction);
}

function setXY(ix, iy) {
 x = ix * dx + x0
 y = iy * dy + y0
}


function setFunction(f,isSilent){
  myfunction = (arguments.length<1?document.getElementById("fOfXY").value:f)
  var x=1
  var y=1
  var z=NaN
  try{eval("z="+myfunction)}catch(e){alert(e)}
  if(isNaN(z)){
	alert("Your function is invalid")
	myfunction = "(x*x+y*y)"
  }
  try{curveXY("",1,1)}catch(e){alert(e);return}
  if (!isSilent)alert("The function Jmol will use is now z=" + myfunction)  
}

myfunction = "(x*x + y*y)/3"
setFunction(myfunction,1)


function curveAsStringXY(app, nX, nY) {
  var i1 = Math.abs(parseInt(""+nX));
  var i2 = Math.abs(0.0 + parseInt(""+nY));
  var s = ""
  for (var i = 0; i < i1; i++)
    for (var j = 0; j < i2; j++) {
      s+= curveXY("",i, j) + "\n";
    }
  return s;

}


function curveAsArrayXY(app, nX, nY, Fxy) {
  var i1 = Math.abs(parseInt(""+nX));
  var i2 = Math.abs(0.0 + parseInt(""+nY));
  var ipt = 0;
  for (var i = 0; i < i1; i++)
    for (var j = 0; j < i2; j++)
      Fxy[i][j] = curveXY("",i, j);
}


function getCheckList(){
 var s=""
 var skey=""
 var ischecked=0
 for(var i=0;i<Callbacks.length;i++){
	skey=Callbacks[i]
	ischecked=(skey.charAt(0)!="-")
	if(ischecked)polling=true;
	Callbacks[i]=skey=skey.replace(/\-/,"")
	s+=" <label><input type=checkbox onclick=getCallbackOptions() id='"+skey+"'"+(ischecked?" checked=1":"")+">"+skey+"</label>"
	if((i+1)%4==0)s+="<br>"
 }
 s+=" <a href=javascript:setOptions(1)>all</a> <a href=javascript:setOptions(0)>none</a> "
 return s
}

function getCallbackOptions(){
 var s=""
 for(var i=0;i<Callbacks.length;i++)if(document.getElementById(Callbacks[i]).checked)s+=Callbacks[i]
 var waspolling = polling
 polling = (s!="")
 if(polling && !waspolling)pollApplet()
 return "monitoring:"+s
}

function pollApplet(){
   whatm=getCallbackOptions()
   if(!polling){
	document.title = ""
	return
   }
   document.title = (new Date())
   var A=jmolGetStatus(whatm)
   parseMessages(A)
   if(polling)setTimeout("pollApplet()",delayms)
}

function setOptions(all_or_none){
 for(var i=0;i<Callbacks.length;i++)document.getElementById(Callbacks[i]).checked = all_or_none
 polling = (all_or_none == 1) 
}


function test1() {
 jmolSetAtomCoordRelative(Math.floor(Math.random()*6),Math.random()/5-0.1,Math.random()/5-0.1,Math.random()/5-0.1)
 jmolScriptWait("refresh")
}

function curve1() {

}

Scripts=new Array(" "
,' This page can be used to experiment with the 10.x prototype. Files are available in <a href=.>this directory</a>.<br>Comments? Suggestions? <a href=mailto:hansonr@stolaf.edu>Bob Hanson</a>'

//,'set debugscript on;load 1crn.pdb;isosurface select (1-4) solvent select (5-8) map solvent'


,'### see also <a href=new.htm>new.htm</a> and <a href=new.htm>new0.htm</a> ###'

,'### isosurface functionXY for mapping###'
,'# Jmol 11.5.46 adds functionXY as a mapping source.That is, you can take any object such as a surface, a sphere, a plane, another function -- anything -- and map it with color based on a function f(x,y). See <a href=isosurface.htm>isosurface.htm</a>.'
	+'A negative value for the number of x values indicates that the function should return a string containing the Z values. '
,'load ch3cl_map.jvxl;moveto /* time, axisAngle */ 1.0 { -166 934 317 74.27} /* zoom, translation */  27.51 0.0 0.0  /* center, rotationRadius */ {0.0 0.25563017 -0.40577123} 3.0632045 /* navigation center, translation, depth */ {0.0 0.0 0.0} 2.036076 0.35426983 50.0;'
,'isosurface i2 sphere 2.0 color absolute 5 30 map functionXY "curveAsStringXY" {-5 -5 -5} {-11 1 0 0} {11 0 1 0} {11 0 0 1};'
,'isosurface i3 plane { 0 1 1 0} color absolute 5 30 map functionXY "curveAsStringXY" {-5 -5 -5} {-11 1 0 0} {11 0 1 0} {11 0 0 1};'

,'###slices through a molecular surface and new way to define plane <br><img src=img/molslice.jpg width=100 height=100 />###'
,'# Jmol uses a unique algorithm to calculate surfaces. Each position in space is given a value that is its distance from the nearest surface point. What this means is that a "surface" is really an "isosurface with cutoff 0". And what that means is that a surface is no different in terms of visualization from a molecular orbital or other atom-based spacial property. Jmol 10.9.71 allows you to generate slices through a surface.'
,'load 2ptn.cif;slab 35;slab on;refresh;restrict clickable;slab off;center visible;moveto 1.0 -976 76 204 77.4 213;isosurface "2ptn-molecular_slice1.jvxl";moveto 3.0 -308 401 863 108.1 213;'
,'# generated from the following command (which takes several seconds on my machine). Note the new way to define a plane simply in terms of three points -- (atom)s or {coordinate}s'
,'load 2ptn.cif;isosurface plane {1 0 10} {0 1 10} {1 1 10} ignore(solvent) molecular'
,'# and, yes, of course, with JVXL you can show as many planes as you like:'
,'load 2ptn.cif;isosurface s1 "2ptn-molecular_slice2.jvxl";moveto 1.0 -976 76 204 77.4 100;isosurface s2 "2ptn-molecular_slice3.jvxl"'


,'###isosurface hkl -- planar slices using Miller indices <br><img src=img/xtalslice.jpg width=100 height=100 />###'
,'# Jmol 10.9.72 introduces the "hkl" keyword indicates that the next three numbers in braces are Miller indices. Note that all coordinates are implicitly fractional. A faster alternative is to use "solvent 0" instead of "molecular".'
,'load nacl.cif {2 2 2};unitcell off;axes 0.2;boundbox on;moveto 1.0 489 872 9 24.9;'
,'select *;isosurface hkl {1 1 1} resolution 4 solvent 0;moveto 1.0 268 -953 -141 88.0;delay 3;restrict none;'
,'select *;isosurface hkl {1/2 1/2 1/2} resolution 4 solvent 0;'
,'select *;isosurface hkl {1 1 0} resolution 4 solvent 0;'
,'select *;isosurface hkl {1 0 1} resolution 4 solvent 0;'
,'select *;isosurface hkl {1 0 0} resolution 4 solvent 0;'

,'###faster solvent/molecular surfaces and isosurface colorscheme "sets" <br><img src=img/2ptn.jpg width=114 height=100>###'
,'# Jmol 10.9.71 has significantly more capability in the area of solvent/molecular surface visualization.'
,'load 2ptn.cif;moveto 1.0 245 959 140 66.2;'
,'isosurface ignore(solvent) sasurface # Solvent-accessible surfaces using "sasurface" are very quick to produce.'
,'isosurface ignore(solvent) molecular colorscheme "sets"; color isosurface translucent;slab on;slab 70 # "molecular" surfaces are significantly more time-consuming to calculate.'
,'slab off'

,'###molecular electrostatic potentials###'
,'# Jmol 10.9.63 introduces <b>isosurface MEP</b>, with which you can display molecular electrostatic potentials. These potentials are calculated from partial charge data present in a file; Jmol cannot calculate these charges.'
,'# Just the MEP:'
,'load CH3F.smol;isosurface resolution 6 mep'
,'load C6H6.smol;isosurface resolution 6 mep'
,'# MEP mapped onto a surface:'
,'load CH3F.smol;isosurface resolution 6 solvent map mep; moveto /* time, axisAngle */ 1.0 { -956 -277 -95 70.01} /* zoom, translation */  100.0 0.0 0.0  /* center, rotationRadius */ {0.0 0.0 0.0} 3.657167 /* navigation center, translation, depth */ {0.0 0.0 0.0} 0.0 0.0 50.0;'
,'load C6H6.smol;isosurface solvent map mep; moveto /* time, axisAngle */ 1.0 { -956 -277 -95 70.01} /* zoom, translation */  100.0 0.0 0.0  /* center, rotationRadius */ {0.0 0.0 0.0} 3.657167 /* navigation center, translation, depth */ {0.0 0.0 0.0} 0.0 0.0 50.0;'
,'load C6H6.smol;isosurface resolution 3 solvent map mep; moveto /* time, axisAngle */ 1.0 { -956 -277 -95 70.01} /* zoom, translation */  100.0 0.0 0.0  /* center, rotationRadius */ {0.0 0.0 0.0} 3.657167 /* navigation center, translation, depth */ {0.0 0.0 0.0} 0.0 0.0 50.0;'
,'# This one may take some time:'
,'load C6H6.smol;isosurface resolution 6 solvent map mep;moveto /* time, axisAngle */ 1.0 { -956 -277 -95 70.01} /* zoom, translation */  100.0 0.0 0.0  /* center, rotationRadius */ {0.0 0.0 0.0} 3.657167 /* navigation center, translation, depth */ {0.0 0.0 0.0} 0.0 0.0 50.0;'
,'# Though somewhat slow, these can be saved as JVXL files:'
,'console on;show isosurface'
,'# and then loaded instantly:'
,'load C6H6-mep.jvxl;isosurface "";moveto /* time, axisAngle */ 1.0 { -956 -277 -95 70.01} /* zoom, translation */  100.0 0.0 0.0  /* center, rotationRadius */ {0.0 0.0 0.0} 3.657167 /* navigation center, translation, depth */ {0.0 0.0 0.0} 0.0 0.0 50.0;'



,'# NOTE -- in testing 10.x.19 and writing up documentation I have changed some of the isosurface parameters. Namely, "fileindex n" is gone. One simply indicates the surface number after the quoted filename similarly to the way you can indicate a model number after a quoted filename in a "load" command. In addition, I have simplified the command syntax by allowing ALL construction/color parameters up front. See <a href=..>the documentation</a>'

,'### the JVXL file format ###'
,'# Jmol 10.x.09 introduces VERY compact orbitals and other molecular properties as isosurfaces.  These files are generated by Jmol from Gaussian CUBE files with compression ratios on the order of 400 to 600:1. This is possible because JVXL files do not allow for variable cutoffs. check out the new "Jmol Voxel File" format at <a href=data/ch3cl.jvxl target=_blank >ch3cl.jvxl</a>. For a discussion see <a href=../misc/JVXL-format.pdf>JVXL-format.pdf</a>. Many examples follow. '

,'### hydrogen-like orbitals calculated using the Schroedinger equation ###<br><img src=img/orbital.jpg width=100 height=100>'
,'# orbitals are defined by three required quantum numbers (n, l, m) and two additional optional numbers: Zeff(effective nuclear charge, default 6), and an optional resolution in the form of a number of points per angstrom (default 10). In addition, you can specify a cutoff'
,'load d_orbitals.jvxl;select hydrogen; spacefill off;set axesMolecular;axes on;moveto 1.0 52 -992 -114 36.0'
,'# px'
,'isosurface phase atomicOrbital 2 1 1;'
,'# pz'
,'isosurface phase atomicOrbital 2 1 0;'
,'# py'
,'isosurface  sign yellow violet phase atomicOrbital 2 1 -1'
,'# dxz'
,'isosurface phase atomicOrbital 3 2 1 '
,'# dyz'
,'isosurface phase atomicOrbital 3 2 -1 '
,'# dxy'
,'isosurface phase atomicOrbital 3 2 -2 '
,'# dx2-y2'
,'isosurface phase atomicOrbital 3 2 2 '
,'# dz2'
,'isosurface phase atomicOrbital 3 2 0 '
,'# f something or other'
,'isosurface phase atomicOrbital 4 3 2 '

,'# You can center a hydrogen-like orbital at any position in molecular space using {x y z} or at any atom using an atom expression. Required parameters include the three quantum numbers: n, l, and m.'
,'load d_orbitals.jvxl; restrict none; set axesMolecular; axes on; moveto 1.0 -909 -267 -320 80 70;set echo top left;echo " a 4f orbital"; refresh; isosurface atomicOrbital 4 3 2'
,'# the PHASE keyword colors by the sign of the wave function.'
,'load d_orbitals.jvxl; restrict none; set axesMolecular; axes on; moveto 1.0 -909 -267 -320 80 70;set echo top left;echo " a phased 4f orbital"; refresh; isosurface phase atomicOrbital 4 3 2 '
,'# an optional parameter is the effective nuclear charge (default 6).'
,'load ch3cl.mol;moveto 1.0 -507 -831 -230 56.6;isosurface center (atomno=1) phase atomicOrbital 2 1 1 '
,'isosurface center (atomno=1) phase atomicOrbital 2 1 1 3.0 '
,'isosurface center (atomno=1) phase atomicOrbital 2 1 1 1.0 '
,'# you can also set the resolution of the orbital in points per angstrom (default 10)'
,'isosurface center (atomno=1) sign yellow orange resolution 5 atomicOrbital 2 1 1 6.0'
,'isosurface center (atomno=1) sign yellow orange resolution 10 atomicOrbital 2 1 1 6.0'
,'isosurface center (atomno=1) sign yellow orange resolution 20 atomicOrbital 2 1 1 6.0'
,'# You can center an orbital just like a lobe -- on a given point in space, on an atom, or on the geometrical center of a group of atoms in an atom expression.'
,'isosurface center {1 1 0} phase atomicOrbital 2 1 1 '
,'# You can distort a hydrogen-like orbital using the ANISOTROPY keyword followed by a coordinate indicating the distortion along each of the three axes. "Look, Ma! A yo-yo!"'
,'isosurface center {1 1 0} anisotropy {0.5 1 1} phase atomicOrbital 2 1 1 '
,'isosurface center {1 1 0} anisotropy {1 0.5 0.5} phase atomicOrbital 2 1 1 '
,'# The ECCENTRICITY keyword can also be used to define a new z-axis and a distortion in x and y relative to this new axis.'
,'isosurface center {1 1 0} eccentricity {1 1 1 0.5} phase atomicOrbital 2 1 1 '
,'# A negative number for the distortion indicates that the z-axis scale should be 1; otherwise it is scaled based on the length of the new z-axis.'
,'isosurface center {1 1 0} eccentricity {1 1 1 -0.5} phase atomicOrbital 2 1 1 '
,'# The SCALE keyword overrides any scaling that would have been applied by the eccentricity.'
,'isosurface center {1 1 0} scale 1.0 eccentricity {1 1 1 1} phase atomicOrbital 2 1 1 '
,'isosurface center {1 1 0} scale 0.5 eccentricity {1 1 1 1} phase atomicOrbital 4 1 0 '


,'### orbitals from cube files --  sign and phase ###<br><img src=img/isoorbital.jpg width=100 height=100>'
,'# orbitals are generally depicted as dichromatically colored isosurfaces. The surface itself is based on the square of the wave function, psi (so that it represents probability); the color is based on the sign of psi. Effectively, one isosurface (sign of psi) is being used to map color onto another isosurface (psi squared).'
,'load dxy.cube;restrict none;set axesmolecular;axes on;isosurface "dxy.cube" map "dxy-phase.cube";show isosurface'
,'# Notice the problem there -- orbitals should be only two colors, not a mix. So we add the keyword "sign" to indicate we want the coloring based on the SIGN of the value in the second CUBE file, not the actual value itself. Note that <a href=data/dxy-phase.cube target=_blank>dxy-phase.cube</a> is a very small, simple file.'
,'load dxy.cube;restrict none;set axesmolecular;axes on;isosurface "dxy.cube" map sign "dxy-phase.cube";show isosurface'
,'# after the keyword "sign" you can add two color keys -- the first for negative; the second for positive.'
,'load dxy.cube;restrict none;set axesmolecular;axes on;isosurface "dxy.cube" map sign [x00A0A0] [xA0A000] "dxy-phase.cube";show isosurface'
,'# In addition, to simpify matters with the eight "standard" p/d orbitals, you can simply define the phase of the coloring as one of the following: x, y, z, xy, xz, yz, x2-y2, or z2. Here we are using a set of d orbitals in one convenient 10Kb file: (a compression ratio of 468:1)'
,'load d_orbitals.jvxl;select hydrogen; spacefill off;set axesMolecular;axes on;moveto 1.0 52 -992 -114 36.0;'
,'isosurface delete dxy phase "xy" "" 1;show isosurface'
,'isosurface delete dyz phase "yz" "" 2;show isosurface'
,'isosurface delete dxz sign yellow blue phase "xz" "" 3;show isosurface'
,'# (Sorry, this file does not contain dx2-y2).'
,'isosurface delete dz2 phase "z2" "" 5;show isosurface'
,'# If a cube file has both positive and negative regions, you can specify "sign" and just one cube file'
,'load benzene-homo.cub.gz;isosurface sign red purple "" ;show isosurface'


,'### <b>MO</b> command ###'
,'# Jmol 10.x.25 includes a new command that allows quick scanning through molecular orbitals almost like they were frames. The <b>MO</b> command takes several simple forms. See <a href=mo.htm>mo.htm</a>'

,'### direct calculation of molecular orbitals (no cube files) ###<br><img src=img/mocalc.jpg width=100 height=100><img src=img/webmo.jpg width=100 height=100>'
,'# Jmol 10.x.20 can render many standard calculated molecular orbitals WITHOUT cube files. Current readers include GAUSSIAN (keywords <a href=http://www.gaussian.com/g_ur/k_gen.htm>pop=full gfprint</a>) and GAMESS output files, and SMOL, SPARCHIVE, and WebMO data files. Most ab initio (STO-3G, 3-21G*, 6-31++G**, etc.) and semi-empirical (AM1, PM3) basis sets can be rendered. The <b>MO</b> command is simpler to use, but less flexible.'
,'# a WebMO file:'
,'load ch2o_homo.mo;moveto 1.0 940 -340 -34 67.0;'
,'# with and without phasing'
,'isosurface mo 1  translucent white'
,'isosurface mo 1  mesh nofill frontonly'
,'isosurface color yellow purple mo 1  mesh nofill frontonly'
,'# note that, like solvent surfaces, the calculation depends upon which atoms are selected. If no atoms are selected, then all orbitals are calculated.'
,'select atomno=2;isosurface mo 1  mesh nofill frontonly'
,'select *;isosurface mo 1  mesh nofill frontonly'
,'# <a target=_blank href=http://www.wavefunction.com>Wavefunction</a>\'s Spartan SMOL files contain a full set of MOs'
,'load C6H6.smol;moveto 1.0 -998 -58 20 61.0;'
,'isosurface cutoff 0.008 mo 1  mesh nofill frontonly'
,'isosurface cutoff 0.008 mo 16  mesh nofill frontonly'
,'isosurface cutoff 0.008 mo 20  mesh nofill frontonly'
,'# The isosurface command can be used to manipulate the phased sections of the MO independently. The key is to indicate the cutoff with an explicit "+" or "-" sign.'
,'isosurface delete mo1pos cutoff +0.008 color green mo 20 opaque'
,'isosurface delete mo1neg cutoff -0.008 color red mo 20  mesh nofill frontonly'

,'# A lower resolution can speed browsing.'
,'isosurface delete cutoff 0.008 resolution 4 mo 20 mesh nofill frontonly'
,'isosurface delete cutoff 0.008 resolution 4 mo 21 mesh nofill frontonly'
,'isosurface delete cutoff 0.008 resolution 4 mo 22 mesh nofill frontonly'
,'isosurface delete cutoff 0.008 resolution 4 mo 33 mesh nofill frontonly'
,'isosurface delete cutoff 0.008 resolution 4 mo 66 mesh nofill frontonly'
,'# You can retrieve the data used for these calculations using getProperty "auxiliaryInfo", which returns JavaScript Object Notation (JSON), which is being translated into JavaScript array notation here.'
,'# Gaussian output: The second frame holds the information we want'
,'load H2-OPT.LOG;frame 2;center visible;moveto 1.0 -118 983 -141 86.9 86'
,'frame 1'
,'frame 2'
,'isosurface mo 1 mesh nofill frontonly'
,'isosurface mo 2 mesh nofill frontonly'
,'isosurface mo 3 mesh nofill frontonly'
,'isosurface mo 4 mesh nofill frontonly'
,'load "water-G03W.out"; getproperty "auxiliaryinfo";frame 2;center visible;moveto 1.0 -571 -817 -75 120.5;'
,'isosurface cutoff 0.08 mo 4  mesh nofill frontonly'
,'isosurface cutoff 0.08 mo 5  mesh nofill frontonly'
,'isosurface cutoff 0.08 mo 6  mesh nofill frontonly'
,'# Spartan SPARCHIVE files can now be read by Jmol, and they also contain molecular orbitals.'
,'load water-AM1.sparchive;moveto 1.0 -567 -732 -379 132.8;'
,'isosurface mo 1  mesh nofill frontonly'
,'isosurface mo 2  mesh nofill frontonly'
,'isosurface mo 3  mesh nofill frontonly'
,'isosurface mo 4  mesh nofill frontonly'
,'isosurface mo 5  mesh nofill frontonly'
,'isosurface mo 6  mesh nofill frontonly'

//,'# Gaussian output files can contain an atomic orbital basis description  and a full set of MOs. We can load all the orientations; model 2 has the basis. (Cannot read molecular orbital data yet, though, for Gaussian files because I do not have a copy of a .)'
//,'load water-AM1.log;model 2;moveto 1.0 -998 -58 20 61.0;'
//,'getProperty "auxiliaryInfo"'
//,'# Or we can just load model 2. Quotes are required around the file name.'
//,'load "water-AM1.log" 2;moveto 1.0 -998 -58 20 61.0;'
//,'getProperty "auxiliaryInfo"'
,'# GAMESS output files can contain an atomic orbital basis description along with the set of eigenvectors. '
,'load gamess-RHF-3-21G.log; frame 2;isosurface mo 8'
,'load gamess-UHF-3-21G.log; frame 2;isosurface mo 8'
,'# SMOL RHF/3-21G calc on XeF4 from <a target=_blank href=http://introchem.chem.okstate.edu/jmol/molecules/>http://introchem.chem.okstate.edu/jmol/molecules/</a>. I have removed the unnecessary encoded isosurface data (1.0MB --> 147KB), so this is no longer a true SMOL file. This file contains 75 molecular orbitals.'
,'load XeF4.smo; moveto 1.0 922 52 385 55.3;'
,'isosurface cutoff 0.008 resolution 5 mo 68  mesh nofill frontonly'
,'# WebMO 6-31G(D) calc on water from <a target=_blank href=http://buchner.chem.hope.edu/~webmodemo/cgi-bin/webmo/jobmgr.cgi>WebMO</a>'
,'load water19.mo; moveto 1.0 922 52 385 55.3;'
,'isosurface cutoff 0.008 resolution 10 mo 17  mesh nofill frontonly'
,'# WebMO 6-311+G(P,D) calc on water from <a target=_blank href=http://buchner.chem.hope.edu/~webmodemo/cgi-bin/webmo/jobmgr.cgi>WebMO</a>'
,'load water35.mo; moveto 1.0 922 52 385 55.3;'
,'isosurface cutoff 0.008 resolution 10 mo 20  mesh nofill frontonly'
,'# WebMO AM1 calculation -- slater functions are no problem!'
,'load job656_density.mo;wireframe 0.07;spacefill 10%'
,'isosurface mo 9'
,'isosurface mo 10'
,'isosurface mo 11'
,'isosurface mo 12'


,'### cartoon orbital lobes ###<br><img src=img/cartoonorb.jpg width=100 height=100>'
,'# Jmol 10.x.16 introduces cartoonish "lobes" that can be placed anywhere. They form the basis for hybrid orbitals and cartoon-like LCAO orbitals. The shape used is the central section of the 3dz2 orbital.'
,'load ch3cl.mol;spacefill off;wireframe 0.05;isosurface center (atomno=5) lobe {0 -1 0 1};moveto 1.0 -507 -831 -230 56.6'
,'# The four numbers in brackets describe the orientation and "eccentricity" of the lobe. The first three numbers describe the vector axis of the lobe. The fourth number is the lateral distortion of the lobe relative to a hydrogen 3dz2 orbital lobe.'
,'isosurface center (atomno=5) color red lobe {0 1 0 1};'
,'isosurface center (atomno=5) color red lobe {0 1 0 0.7};'

,'# Note that the color can be included and must be placed PRIOR TO the "lobe" keyword.'
,'isosurface center {1 0 0} color green lobe {0 1 0 0.7}'
,'isosurface center {1 0 0} color yellow lobe {0 0 -1 0.7}'

,'# the scale of the lobe is determined either by the magnitude of its defining vector or explicitly using the SCALE keyword.'
,'isosurface center (atomno=5) scale 0.7 lobe {0 -1 0 0.7}'
,'isosurface center (atomno=5) lobe {1 -1 0 0.7}'
,'# a negative distortion value can also be used to indicate a "unit size" lobe with the specified distortion.'
,'isosurface center (atomno=5) scale 1.0 lobe {1 1 0 0.7}'
,'isosurface center (atomno=5) lobe {-1 -1 0 -0.7}'

,'### positionable LCAO "cartoon" orbitals ###<br><img src=img/lcao.jpg width=100 height=100>'
,'# Jmol 10.x.17 introduces tear-drop shaped "cartoon" orbitals that can be used to depict the atomic orbitals generally discussed in relation to the linear combination of atomic orbitals (LCAO) approximation, Hueckel theory, and hybridization. The lobes use a distortion of 0.7 relative to a standard 3dz2 orbital.'
,'load water.xyz;moveto 1.0 91 357 -930 75.5 75;'
,'# sp3-like hyprid cartoons from an atom connected to two other atoms:'
,'isosurface delete lcaoCartoon "lpa" (atomno=3)'
,'isosurface delete lcaoCartoon "lpb" (atomno=3)'

,'# or unhybridized p-orbital cartoons:'
,'isosurface delete lcaoCartoon "px" (atomno=3)'
,'isosurface delete lcaoCartoon "py" (atomno=3)'
,'isosurface delete lcaoCartoon "pz" (atomno=3)'

,'# a "-" sign flips the direction of the lobe:'
,'isosurface delete lcaoCartoon "-pz" (atomno=3)'

,'# or the two lobes can be colored independently: '
,'color $lcao2_pza red;color $lcao2_pzb blue;'

,'# you can name the orbitals yourself, then refer to their individual lobes for coloring:'
,'isosurface delete mypx lcaoCartoon "px" (atomno=3)'
,'color $mypxa translucent red;color $mypxb blue;'

,'# these are isosurfaces, so you can change their display characteristics:'
,'isosurface mypxb mesh nofill frontonly'

,'# you can also use center, scale, and sign. The use of center allows you to place on one atom an orbital aligned for another.'
,'isosurface delete lcaoCartoon "pz" (atomno=3)'
,'isosurface horb center (atomno=2) lcaoCartoon "pz" (atomno=3)'
,'isosurface horba delete;isosurface horbb delete;isosurface horb center (atomno=2) scale 2.0 lcaoCartoon "pz" (atomno=3)'
,'isosurface horba delete;isosurface horbb delete;isosurface horb center (atomno=2) scale 0.5 color red blue lcaoCartoon "pz" (atomno=3)'

,'# individual lobes can be designated using "a" and "b":'
,'isosurface delete lcaoCartoon "pza" (atomno=3)'
,'isosurface delete lcaoCartoon "pzb" (atomno=3)'

,'# cartoon orbitals for C=O oxygens are aligned properly.' 
,'load caffeine.xyz;moveto 1.0 -480 868 129 146.9;set axesMolecular;axes on'
,'isosurface delete color red lcaoCartoon "pz" (atomno=11)'
,'isosurface delete color yellow lcaoCartoon "px" (atomno=11)'
,'isosurface delete color blue lcaoCartoon "pya" (atomno=11)'
,'isosurface delete lcaoCartoon "pz" (atomno=11);isosurface lcaoCartoon "pz" (atomno=5)'
,'isosurface delete lcaoCartoon "pz" (atomno=11);isosurface lcaoCartoon "-pz" (atomno=5)'
,'isosurface delete lcaoCartoon "-pz" (atomno=11);isosurface lcaoCartoon "pz" (atomno=5)'

,'# p-orbital and in-plane hybrid for an sp2-hybridized atom:'
,'# the default orientation for the positive end of the z orbital is toward positive z in the molecular frame.'
,'moveto 1.0 -707 -427 -564 90.0;'
,'isosurface delete lcaoCartoon "pza" (atomno=21)'
,'isosurface delete lcaoCartoon "pzb" (atomno=21)'
,'isosurface color red lcaoCartoon "sp2" (atomno=21)'
,'isosurface delete lcaoCartoon "pz" (atomno=21)'

,'# also the other two hybrids:'
,'isosurface delete lcaoCartoon "sp2a" (atomno=21)'
,'isosurface delete lcaoCartoon "sp2b" (atomno=21)'

,'# sp2-like cartoons from an atom connected only to one other sp2-type atom:'
,'isosurface delete lcaoCartoon "sp2a" (atomno=11)'
,'isosurface lcaoCartoon "sp2b" (atomno=11)'
,'isosurface delete lcaoCartoon "sp2c" (atomno=11)'

,'# sp3-like cartoons from a singly-connected atom:'
,'isosurface delete lcaoCartoon "sp3a" (atomno=11)'
,'isosurface lcaoCartoon "sp3b" (atomno=11)'
,'isosurface lcaoCartoon "sp3c" (atomno=11)'
,'# the pi system of caffeine:'
,'load caffeine.xyz;spacefill off;moveto 1.0 -882 -290 -371 77.5 93;isosurface delete lcaoCartoon "pz" (atomno=21);isosurface lcaoCartoon "pz" (atomno=20);isosurface lcaoCartoon "pz" (atomno=8);isosurface lcaoCartoon "pz" (atomno=3);isosurface lcaoCartoon "pz" (atomno=7);isosurface lcaoCartoon "pz" (atomno=2);isosurface lcaoCartoon "pz" (atomno=4);isosurface lcaoCartoon "pz" (atomno=5);isosurface lcaoCartoon "pz" (atomno=6);isosurface lcaoCartoon "pz" (atomno=9);isosurface lcaoCartoon "pz" (atomno=11);'//isosurface color red lcaoCartoon "px" (atomno=11);isosurface color red lcaoCartoon "pya" (atomno=11);isosurface color red lcaoCartoon "px" (atomno=9);isosurface color red lcaoCartoon "pya" (atomno=9);isosurface color blue lcaoCartoon "sp2" (atomno=21);'

,'### spheres and ellipsoids ###<br><img src=img/ellipsoid.jpg width=100 height=100>'
,'# all we are doing here is applying a distortion to a sphere along any of the three coordinates, x, y, and z.' 
,'load d_orbitals.jvxl;moveto 1.0 -507 -831 -230 56.6;set axesMolecular;axes on;set axes scale 1.1'
,'isosurface center {2 2 2} sphere 1.0'
,'isosurface center {2 2 2} sphere 2.0'
,'isosurface ellipsoid {1 0 0 0.7}'
,'# the four parameters are the "eccentricity" of the ellipse -- the x,y,z coordinates of the vector defining the "c" axis followed by the a/c = b/c ratio of the two perpendicular axes. Future plans are to support Ortep anisotropies, which allow all three axes to be independently scalable, but that has not been implemented yet.'
,'isosurface center {0 0 2} ellipsoid {0 1 0 0.5}'
,'isosurface ellipsoid {1 0 0 .5};'
,'isosurface ellipsoid {0 1 0 .5};'
,'isosurface color orange ellipsoid {0 0 1 .5};'
,'isosurface color white ellipsoid {1 0 0 .5};'
,'# the size of the ellipsoid is determined by the magnitude of the cx,cy,cz vector'
,'isosurface color red ellipsoid {1 1 1 .5}'
,'isosurface resolution 2 color yellow ellipsoid {0.577 0.577 0.577 1.5}  mesh nofill frontonly'
,'isosurface color green ellipsoid {0.577 -0.577 0.577 .5}'
,'# the SCALE keyword overrides the scaling based on the cx,cy,cz vector length'
,'isosurface scale 1.0 color red ellipsoid {1 1 1 .5}'
,'isosurface scale 0.7 color red ellipsoid {1 1 1 .5}'

,'### planes as isosurfaces ###<br><img src=img/isoplane.jpg width=100 height=100><img src=img/plane1.jpg width=100 height=100>'
,'Planes of electrostatic potential are particularly suitable to the JVXL format, because they do not require any surface or edge fraction data. Originally my thought was that all that is needed was to compress the color data. <a href=data/plane.jvxl>plane.jvxl</a> is only 952 bytes!'
,'load plane.jvxl;moveto 1.0 905 -411 -107 51.8 50;set axesMolecular; axes on; isosurface myiso "";moveto 4.0 647 144 749 11.4 114;restrict none'
,'# But if you look closely, you will see the problem. The rendition is very blocky. This is because we are not interpolating enough.'
,'# Here we use the actual cube file, so we can select a plane. The plane definition takes the form of four numbers, {a b c d} where ax + by + cz + d = 0. The three numbers also define the vector representing the normal to the plane. <a href=http://mathworld.wolfram.com/Plane.html target=_blank>Math World: plane</a>. Go ahead and try different planes. Just change the numbers in the textbox below the applet and press the [ENTER] key.'
,'isosurface myiso plane {0 0 1 0} color absolute  0.1 1 map "ch3cl-esp.cub.gz";show isosurface;'
,'isosurface myiso plane {0 0 1 1.8} color absolute  0.1 1 map "ch3cl-esp.cub.gz";show isosurface;'
,'isosurface myiso plane {0 0 1 1.5} color absolute  0.1 1 map "ch3cl-esp.cub.gz" dots nofill ;moveto 0.0 -923 -321 -213 67.7;show isosurface;'
,'isosurface myiso plane {0.3 -0.4 0.1 0} color absolute  0.1 1 map "ch3cl-esp.cub.gz";moveto 0.0 -923 -321 -213 67.7;show isosurface;'
,'# You can specify the number of contours you want to use. The default is 11. A negative number indicates that you want to only see one single contour.'
,'load contour.jvxl;isosurface myiso plane {0 0 1 1.8} color absolute  0.1 1 contour -1 map "ch3cl-esp.cub.gz";set perspectivedepth off;moveto 0 -934 -197 -297 73.; # single contour'
,'load contour.jvxl;isosurface myiso plane {0 0 1 1.8} color absolute  0.1 1 contour -2 map "ch3cl-esp.cub.gz";set perspectivedepth off;moveto 0 -934 -197 -297 73.; # single contour'
,'load contour.jvxl;isosurface myiso plane {0 0 1 1.8} color absolute  0.1 1 contour -3 map "ch3cl-esp.cub.gz";set perspectivedepth off;moveto 0 -934 -197 -297 73.; # single contour'
,'# And the JVXL file equivalents: '
,'load contour.jvxl;isosurface myiso contour 10 "";moveto 0 -934 -197 -297 73.'
,'load contour.jvxl;isosurface myiso contour -1 "";moveto 0 -934 -197 -297 73.'

,'### planes through calculated atomic and molecular orbitals; color schemes ###<br><img src=img/aoslice.jpg width=100 height=100><img src=img/moplane.jpg width=100 height=100>'
,'load d_orbitals.jvxl;restrict none;set axesmolecular;axes on;moveto 1.0 318 -943 -96 51.4;'
,'# for orbital slices it is important to specify an odd number of contours. (The default number of contours is 11 for this reason.) Compare the following two scripts. Notice that when the contours is even, the two lobes are oddly different. This is because one contour is right a 0.00, and that leads to a contour that is too sensitive to random noise in the sampling method.'
,'isosurface plane {0 1 0 0} contour 10 orbital 2 1 0 1.0'
,'isosurface plane {0 1 0 0} contour 11 orbital 2 1 0 1.0'
,'isosurface plane {0 1 0 0} contour 21 orbital 3 1 0 2.0'
,'# additional tricks involve using different color schemes and possibly splitting the orbital depiction into two halves.'
,'load ch2o_homo.mo;wireframe 0.05;spacefill 0;moveto 1.0 940 -340 -34 67.0;'
,'isosurface plane {0 1 0 0} color absolute -0.2 0.2 colorscheme "roygb" contour 21 mo 1'
,'isosurface plane {0 1 0 0} color absolute -0.2 0.2 colorscheme "roygb" reverseColor contour 21 mo 1'
,'isosurface plane {0 1 0 0} color absolute -0.2 0.2 contour 31 colorscheme "rwb" mo 1'
,'isosurface plane {0 1 0 0} color absolute 0.008 0.2 colorscheme "high" contour 21 mo 1'
,'isosurface plane {0 1 0 0} color absolute -0.2 -0.008 colorscheme "low" contour 21 mo 1'

,'### user-defined functions ###<br><img src=img/functionxy.jpg width=100 height=100><img src=img/contourf.jpg width=100 height=100>'
,'# You can now use user-defined functions to create a surface, and you can map cube data onto an arbitrarily defined function(x,y). If you wish, you can then "show isosurface" and put the surface into a JVXL file for delivery over the web. '
	+'In this case we are calling the JavaScript function <a href=javascript:alert(curveXY)>curveXY()</a>, '
	+'which evaluates <input id=fOfXY type="text" size="20" value="'+myfunction+'"> to get the actual function value. '
	+'The x and y coordinates passed to this function are NOT the actual x and y coordinates of the point. '
	+'They are the x and y coordinates of the point in the "voxel cube" defined by the origin and three vector definitions '
	+'listed after the function name in the command. Each vector definition includes the number of voxels along that direction '
	+'and the xyz coordinates defining the grid size in that direction. These vectors can be in any direction, '
	+'but they should be perpendicular if the surface is to be color-mapped. Units are Angstroms. '
	+'A negative value for the number of x values indicates that the function should return a string containing the Z values. '
	+'A negative number for both X and Y indicate that the function expects a float[][] array in the fourth parameter and will fill that directly. (Go ahead and change that function, '
	+'click <a href=javascript:setFunction()>here</a> to "set" the function, and then see what happens when you click the link below again.) '
,'zap; set axesMolecular; axes on; moveto 1.0 -909 -267 -320 80 70;set echo top left;echo " generating the surface..."; refresh; javascript "x0=-5;y0=-5;dx=1;dy=1";isosurface functionXY "curveAsStringXY" {-5 -5 -5} {-11 1 0 0} {11 0 1 0} {11 0 0 1}; echo ""; show isosurface'
,'# the JVXL equivalent:'
,'zap; set axesMolecular; axes on; moveto 1.0 -909 -267 -320 80 70;set echo top left;echo " JVXL equivalent"; refresh; isosurface "fxy.jvxl"'
,'# color-mapping a curved surface -- a bit crude looking because mapped functions are not contoured automatically.'
,'load ch3cl.mol; moveto 1.0 -982 -66 -176 75.9 70;set echo top left;echo " generating the surface..."; refresh; javascript "x0=-2;y0=-2;dx=0.2;dy=0.2"; isosurface functionXY "curveAsArrayXY" {-2 -2 -2} {-21 .2 0 0} {-21 0 .2 0} {21 0 0 .2} color absolute 0.1 0.5 "ch3cl-esp.cub.gz"; echo ""; show isosurface'
,'# color-mapping a curved surface with contours is as simple as adding the CONTOUR keyword.'
,'load ch3cl.mol; moveto 1.0 -982 -66 -176 75.9 70;set echo top left;echo " generating contoured surface..."; refresh; javascript "x0=-2;y0=-2;dx=0.2;dy=0.2"; isosurface contour functionXY "curveAsStringXY" {-2 -2 -2} {-21 .2 0 0} {21 0 .2 0} {21 0 0 .2} color absolute 0.1 0.5 "ch3cl-esp.cub.gz"; echo ""; show isosurface'
,'# and the JVXL equivalent:'
,'# color-mapping a curved surface with contours'
,'load ch3cl.mol; moveto 1.0 -982 -66 -176 75.9 70;isosurface "fxycontour.jvxl"'
,'# for which the contouring can be adjusted, because the color data itself encodes the original values to within about one part in 8000:'
,'isosurface contour 1 "contourf.jvxl"'
,'isosurface contour 20 reverseColor "contourf.jvxl"'
,'isosurface contour 20 reverseColor color absolute 0.01 0.8 "contourf.jvxl"'
,'isosurface contour 20 reverseColor color absolute 0.001 0.5 "contourf.jvxl"'
,'# Gibbs graph test <a href="javascript:setFunction(\'Math.pow(Math.E,y/4.0001)/Math.pow(x,1)\')">set</a>'
,'load gibbs.jvxl;restrict none; set axesMolecular; axes on;moveto 1.0 -680 -528 -509 105.2 41 -37 33;draw plane1 {.4 0 0} {0 .5 0} {0 0 2};isosurface "";'

,'### isosurface solvent ###<br><img src=img/solvbenzene.jpg width=100 height=100><img src=img/isosurface.jpg width=100 height=100>'
,'# Jmol 10.x.11 introduces the ability to create solvent-excluded surfaces using the SOLVENT keyword.'
,'# First, just the surface:'
,'load ch3cl.mol;isosurface resolution 4 solvent;moveto 1.0 -507 -831 -230 56.6;show isosurface'
,'# Now mapped using electrostatic potential'
,'load ch3cl.mol;isosurface resolution 4 solvent map "ch3cl-esp.cub.gz";moveto 1.0 -507 -831 -230 56.6;show isosurface'
,'# And the JVXL equivalent (18K)'
,'load ch3cl.mol;isosurface "ch3cl-solvent.jvxl";moveto 1.0 -507 -831 -230 56.6;'
,'# The color mapping can be adjusted to your liking'
,'isosurface resolution 4 solvent color absolute -0.01  0.01 map "ch3cl-esp.cub.gz";moveto 1.0 -507 -831 -230 56.6;'
,'# solvent probe radius is set using the "set radius" command'
,'load ch3cl.mol;set radius 3.0; isosurface resolution 6 solvent map "ch3cl-esp.cub.gz" ;moveto 1.0 -507 -831 -230 56.6;'
,'# back to the default:'
,'load ch3cl.mol;set radius 1.2; isosurface resolution 6 solvent map "ch3cl-esp.cub.gz";moveto 1.0 -507 -831 -230 56.6;'

,'### solvent examples -- using select and resolution ###<br><img src=img/isoenzyme.jpg width=100 height=100><img src=img/solv1crn.jpg width=100 height=100>'
,'# starting with Jmol 10.x.23, selecting only a subset of the atoms displays only the corresponding subset of the overall surface. Note that we use the script file <a target=_blank href=data/groups.scr>groups.scr</a> here for quick reference to specific organic groups.'
,'load caffeine.xyz;script groups.scr;select ~CH3 or ~CH; isosurface resolution 3 solvent translucent;'
,'load 1crn.pdb;select 1-3;isosurface ~pdb color yellow solvent;moveto 2.0 968 237 84 158.3;'
,'load 1crn.pdb;select 4-10;isosurface color yellow resolution 1 solvent'
,'# the RESOLUTION keyword allows control over the fineness of detail of the surface. The default resolution is 2 points per Angstrom.'
,'load C6H6.smol;isosurface ~benzene solvent mesh nofill frontonly'
,'load C6H6.smol;isosurface ~benzene resolution 4 solvent mesh nofill frontonly'
,'load caffeine.xyz;isosurface ~caffeine solvent mesh nofill frontonly '
,'load caffeine.xyz;isosurface ~caffeine resolution 1 solvent mesh nofill frontonly'
,'# for enzymes, a very low resolution may still be suitable'
,'load 1crn.pdb;select 4-10;isosurface ~pdb color white resolution 1 solvent translucent'
,'# this next one takes a few seconds. Be patient:'
,'load 1crn.pdb;isosurface ~pdb solvent'
,'# lower resolution, mesh only:'
,'load 1crn.pdb;isosurface ~pdb resolution 0.5 solvent mesh nofill frontonly'
,'# It may take several seconds to create a solvent surface, but the JVXL file option provides a way of doing this calculation once, then just delivering the data to users.'
,'load 1crn.pdb;isosurface "1crn.jvxl"'
,'load 1crn.pdb;select 1-3;isosurface ~pdb color yellow addHydrogens solvent;moveto 2.0 968 237 84 158.3;'
,'load 1crn.pdb;isosurface select (1-4) solvent select (5-8) map solvent'



,'### solvent examples -- sasurface ###<br><img src=img/isobenzene.jpg width=100 height=100><img src=img/solvcaff.jpg width=100 height=100>'
,'# A solvent-accessible surface is the surface described the CENTER of a spherical idealized solvent of a specified radius rolling around the molecule. Jmol 10.x.18 can display this surface using the SASURFACE keyword:'
,'load C6H6.smol;zoom 70;isosurface ~benzene sasurface translucent'
,'load caffeine.xyz;zoom 70;isosurface ~caffeine color red  sasurface translucent '
,'load caffeine.xyz;zoom 70;isosurface ~caffeine color yellow sasurface mesh nofill frontonly translucent'
,'# a lower resolution may work here'
,'load caffeine.xyz;moveto 1.0 -824 -413 -387 85.6 70;isosurface ~caffeine resolution 1 color yellow sasurface mesh nofill frontonly translucent'


,'### comparing JVXL and CUBE data ###<br><img src=img/isoesp.jpg width=100 height=100><img src=img/isoethene.jpg width=100 height=100>'
,'# first, the 3.7Mb cube file:'
,'load ch3cl.cub;moveto 1.0 -935 -354 -21 67.2;'
,'# a file containing two isosurfaces. "load" only reads the coordinates.'
,'isosurface pos05 cutoff 0.05 blockdata "ch3cl.cub" 1;show isosurface'
,'isosurface pos05 cutoff 0.05 blockdata "ch3cl.cub" 2;show isosurface'
,'#'
,'# now compare the 7Kb (490:1 compressed) Jmol voxel file'
,'load ch3cl.jvxl;moveto 1.0 -935 -354 -21 67.2;'
,'isosurface pos05 cutoff 0.05 "ch3cl.jvxl" 1;show isosurface'
,'isosurface pos05 cutoff 0.05 "ch3cl.jvxl" 2;show isosurface'
,'# Can you tell the difference? (They are ever so slightly different.)'
,'#'
,'# Next is ethene, compressed 416:1 relative to ethene-HOMO.cub and 65:1 relative to ethene-HOMO.cub.gz'
,'load ethene.jvxl;moveto 1.0 -935 -354 -21 67.2;'
,'isosurface pos "" 1;show isosurface'
,'isosurface neg "" 2;show isosurface'
,'#'
,'# Next is a mapped surface: CH3Cl electrostatic potential mapped on electron density:'
,'load ch3cl.cub;moveto 1.0 -935 -354 -21 67.2;'
,'isosurface myiso "ch3cl-density.cub.gz"; show isosurface'
,'isosurface myiso "ch3cl-density.cub.gz" color absolute 0.0 0.2 map "ch3cl-esp.cub.gz"; show isosurface'


,'# And the <a href=data/ch3cl_map.jvxl>JVXL equivalent</a>. Note that it is one file, not two:'
,'load ch3cl_map.jvxl;moveto 1.0 -935 -354 -21 67.2;'
,'isosurface myiso ""'
,'# At 6206 bytes, this represents a compression of 192:1 relative the the GZ files and 584:1 over the uncompressed CUBE files'
,'spacefill 20%;wireframe 0.15;slab off;set specular 22; set specpower 40; set specpower -6;set diffuse 84; set ambient 45; # jmol defaults'

,'### various isosurface options:###'
,'load ch3cl-solvent.jvxl;isosurface "";moveto 1.0 -507 -831 -230 56.6;'
,'isosurface mesh nodots nofill'
,'isosurface nomesh dots nofill'
,'isosurface nomesh nodots fill'
,'color isosurface red translucent'
,'color isosurface orange opaque'
,'slab 70; slab on'
,'slab off'

//,'### insideout option ###'
//,'# insideOut allows the "shiny" side to be up:'
//,'load caffeine.xyz;isosurface "functionxy.jvxl"; moveto 1.0 -909 -267 -320 80 70'
//,'load caffeine.xyz;isosurface insideout "functionxy.jvxl"; moveto 1.0 -909 -267 -320 80 70'


,'### Marching Squares contours ###<br><img src=img/marchingsquares.jpg width=100 height=100>'
,'# The key turns out to be an adaptation of the 3D "Marching Cubes" data interpolation algorithm to two dimensions -- "Marching Squares". For the JVXL equivalent, we opt for a higher level of precision in the data compression. The files are larger than before, but still afford 400-500:1 compression ratios.'
,'load plane2.jvxl;isosurface myiso "";moveto 0.0 647 144 749 11.4 114;restrict none;'
,'# What you are looking at is a set of 10 contours that have then been triangulated using the Marching Square algorithm with linear shading through each triangle. Here is a closeup:'
,'isosurface triangles;moveto 4.0 -292 184 939 67.9 1090 81 -90;'
,'isosurface notriangles;'
,'#'
,'# When the surface is a plane, our eyes are particularly sensitive to differences in shading and color. JVXL files are not quite the same as CUBE files, and this is noticeable for slices. Still, the effect is subtle, because it is only slight variations in the square-contour intersection points that we are seeing.'
,'#'
,'# CUBE file (593K gzipped)'
,'load contour.jvxl;isosurface myiso plane {0 0 1 1.8} color absolute  0.1 1 map "ch3cl-esp.cub.gz";moveto 0 -853 -521 13 167.5 194;show isosurface;'

,'# JVXL equivalent (4.3K not zipped)'
,'load contour.jvxl;moveto 0 -853 -521 13 167.5 194;set axesMolecular; isosurface myiso "" 1'
,'#'

,'# CUBE file (593K gzipped):'
,'load contour.jvxl;isosurface myiso plane {0 0 1 1.5} color absolute  0.1 1 map "ch3cl-esp.cub.gz";moveto 0 -853 -521 13 167.5 194;show isosurface;'

,'# JVXL equivalent (3.7K not zipped):'
,'load contour.jvxl;moveto 0 -853 -521 13 167.5 194;set axesMolecular; isosurface myiso "" 2'
,'#'
,'# CUBE file dots only:'
,'load contour.jvxl;isosurface myiso plane {0 0 1 1.5}  color absolute  0.1 1 map "ch3cl-esp.cub.gz" dots nofill;moveto 0 -853 -521 13 167.5 194;show isosurface;'

,'# JVXL equivalent dots only:'
,'load contour.jvxl;moveto 0 -853 -521 13 167.5 194;set axesMolecular; isosurface myiso "" 2 dots nofill '
,'#'
,'isosurface dots nomesh nofill frontonly'
,'isosurface fill nomesh nodots'
,'isosurface mesh nodots nofill'

,'### obtaining JVXL file data ###'
,'# The SHOW ISOSURFACE command delivers the jvxl equivalent of an isosurface to the message queue.'
,'show isosurface # goes to the message queue'

,'### Files containing multiple isosurfaces ###'
,'# JVXL files can be combined into one file with multiple surfaces. You can just do this by hand. Make sure that the FIRST number on the JVXL dataset definition line is a negative number indicating how many isosurfaces are contained in the file. (This particular file uses older data that is not treated with Marching Squares, so it is somewhat blocky.) '
,'load planes.jvxl;moveto 1.0 905 -411 -107 51.8 50;set axesMolecular; axes on'
,'isosurface myiso1 "planes.jvxl" 1'
,'isosurface myiso2 "planes.jvxl" 2'
,'isosurface myiso3 "planes.jvxl" 3'

,'### isosurface FIXED/MODELBASED and multiple models ###'
,'# As in the case of draw objects (points, lines, planes) there may be times when isosurfaces are intended to be displayed for all models ("FIXED") and times when they are model-based. The default assumption is MODELBASED, but one can also specify FIXED. Note that we use the 1001, 2001, 3001,... notation for frames because they come from different files (or so the applet thinks!). Using this technique you can select which orbitals to view based on which frames are currently visible.'
,'load files "ch3cl.mol" "ch3cl.mol";moveto 1.0 -507 -831 -230 56.6;'
,'frame 1001;isosurface orb1 center (atomno=1) phase atomicOrbital 2 1 1'
,'frame 2001;isosurface orb2 center (atomno=2) phase atomicOrbital 2 1 1'
,'isosurface orb3 center (atomno=5) FIXED phase atomicOrbital 2 1 1'
,'frame 1001'
,'frame 2001'
,'frame 0'
,'frame 2001;isosurface orb1 modelbased # now orb1 is attached to the second model, not the first'
,'frame 1001'
,'frame 2001'
,'frame 1001;isosurface orb1 modelbased # now orb1 is attached to the first model, not the second'
,'frame 2001'
,'frame 1001'
,'isosurface orb1 nofill # NOFILL turns off the orbital but does not delete it'
,'isosurface orb2 nofill'
,'isosurface orb3 delete # DELETE also hides it, but you cannot get it back.'
,'isosurface orb1 fill'
,'isosurface orb2 fill'
,'isosurface orb3 fill # if you deleted it, it is gone for good'


,'### Applying jvxl isosurfaces to other files ###'
,'# Most CUBE/JVXL files have file coordinates in them, but you do not need to use those coordinates. You can instead load one file and then apply the isosurface from another. Just making the point here:'
,'load caffeine.xyz;moveto 1.0 905 -411 -107 51.8 50'
,'isosurface myiso "plane.jvxl"'
,'isosurface myiso "plane1.jvxl"'
,'isosurface myiso "plane2.jvxl"'



,'### some commands just for convenience on this page ###'

,'# <a href=javascript:void(jmolSaveOrientation("save1"))>void(jmolSaveOrientation("save1"))</a>'
,'# <a href=javascript:void(jmolSaveOrientation("save2"))>void(jmolSaveOrientation("save2"))</a>'
,'# <a href=javascript:void(jmolRestoreOrientation("save1"))>void(jmolRestoreOrientation("save1"))</a>'
,'# <a href=javascript:void(jmolRestoreOrientation("save2"))>void(jmolRestoreOrientation("save2"))</a>'
,'spacefill 20%;wireframe 0.15;slab off;set specular 22; set specpower 40; set specpower -6;set diffuse 84; set ambient 45;set testflag1 off; set testflag2 off; set testflag3 off; set testflag4 off;isosurface nodots; # jmol defaults'
	





,'### appendix: testing the idea of vertex normal grouping ###<br><img src=img/isobug.jpg width=100 height=100>'
,'# Along the way, I noticed that the specular refection was not optimal. The problem turned out to be a problem with the "average normals" used at the vertices of the triangles. The problem is now fixed.see <a target=_blank href=jvxl-compare-normal.jpg>jvxl-compare-normal.jpg</a> and <a target=_blank href=jvxl-compare-normal2.jpg>jvxl-compare-normal2.jpg</a>.'
,'set testflag4; set testflag2 off;load ch3cl_map.jvxl;spacefill off;wireframe off;set specular 80; set specpower 80;moveto 0.0 -226 634 -740 71.3 580;set testflag3;depth 50;slab 100;slab on;isosurface myiso gridpoints "" '
,'set testflag4; set testflag2;load ch3cl_map.jvxl;spacefill off;wireframe off;set specular 80; set specpower 80;moveto 0.0 -226 634 -740 71.3 580;set testflag3;depth 50;slab 100;slab on;isosurface myiso gridpoints "" '
,'set testflag4;load ch3cl_map.jvxl;spacefill off;wireframe off;set specular 80; set specpower 80;moveto 0.0 -226 634 -740 71.3 580;set testflag3;depth 50;slab 100;slab on;isosurface myiso gridpoints "" '
,'# note -- this demo uses very high specular characteristcs.'
,'load ch3cl_map.jvxl;spacefill off;wireframe off;set specular 80; set specpower 80;moveto 0.0 -830 547 -110 150.7 145;set testflag3;depth 0;slab 50;slab on;isosurface myiso gridpoints "" '
,'# cool effect, anyway.... Two more views of this surface highlighting the grid:'
,'load ch3cl_map.jvxl;spacefill off;wireframe off;set specular 80; set specpower 80; set testflag3;depth 0;slab 70;depth 50;slab on;isosurface myiso gridpoints "" ; moveto 1.0 992 -2 -125 159.1 652 -24 -74;;'
,'#'
,'load ch3cl_map.jvxl;spacefill off;wireframe off;set specular 80; set specpower 80; set testflag3;depth 0;slab 70;depth 50;slab on;isosurface myiso gridpoints  ""; moveto 1.0 992 -11 -127 159.2;'
,'# A set of test options is available.'
,'set testflag1 ON;  # turn off 2-sided triangles (requires reloading)'
,'set testflag2 ON;  # no associative grouping of vertex normals (requires reloading)'
,'set testflag3 ON;  # shrink triangles by 10% for visualization'
,'set testflag4 ON;  # show vertex normals'
,'isosurface dots;   # show grid points (if "gridpoint" option was used)'
,'set testflag1 OFF; # default 2-sided triangles (requires reloading)'
,'set testflag2 OFF; # associate normals with common grid point (requires reloading)'
,'set testflag3 OFF; # connect triangles'
,'set testflag4 OFF; # hide vertex normals'
,'isosurface nodots; # hide grid points'
,'isosurface myiso gridpoints "" # for testing only... see the "critical" grid points -- MUST be accompanied by "delete"'
,'#'
,'<a href=></a><b>After running any of the above tests, run the next command to reset Jmol defaults.</b>'
,'#'
,'spacefill 20%;wireframe 0.15;slab off;set specular 22; set specpower 40; set specpower -6;set diffuse 84; set ambient 45;set testflag1 off; set testflag2 off; set testflag3 off; set testflag4 off;isosurface nodots; # jmol defaults'


,'### acknowledgments ###'
,'Miguel Howard wrote the original isosurface code using the <a href=http://www.exaflop.org/docs/marchcubes/index.html target=blank>Marching Cube</a> algorithm. I used that as a basis to adapt the <a href=http://www.evl.uic.edu/aej/526/lecture03.html target=blank>Marching Squares</a> algorithm, which was kindly suggested to me by <a href=http://www.stolaf.edu/people/olaf/ target=blank>Olaf Hall-Holt</a>. Fast gaussian molecular orbital calculations are based on algorithms by <a href=http://www.ccl.net/cca/software/SOURCES/FORTRAN/psi88/src/psi1.f>Daniel Severance and Bill Jorgensen</a>. I thank <a href=mailto:wkpark@chem.skku.ac.kr>Won Kyu Park</a> for pointing me to this work. The JVXL file format was my own idea.'
 ,' <a href=javascript:dotest(-1)>[appletInfo]</a>'
 +' <a href=javascript:dotest(-2)>[animationInfo]</a>'
 +' <a href=javascript:dotest(0)>[fileName]</a>'
 +' <a href=javascript:dotest(1)>[fileHeader]</a>'
 +' <a href=javascript:dotest(2)>[fileContents]</a>'
 +'<br><a href=javascript:dotest(8.1)>[atomList]</a>'
 +' <a href=javascript:dotest(8)>[atomInfo]</a>'
 +' <a href=javascript:dotest(7)>[bondInfo]</a>'
 +' <a href=javascript:dotest(7.5)>[moleculeInfo]</a>'
 +" <a href=javascript:dotest(10)>[extractModel]</a>"
 +'<br><a href=javascript:dotest(3)>[orientationInfo]</a>'
 +' <a href=javascript:dotest(3.1)>[auxiliaryInfo]</a>'
 +' <a href=javascript:dotest(3.2)>[transformInfo]</a>'
 +' <a href=javascript:dotest(3.3)>[centerInfo]</a>'
 +' <a href=javascript:dotest(3.4)>[boundboxInfo]</a>'
 +"<br><a href=javascript:dotest(4)>[modelInfo]</a>"
 +" <a href=javascript:dotest(4.2)>[polymerInfo]</a>"
 +" <a href=javascript:dotest(4.3)>[chainInfo]</a>"
 +" <a href=javascript:dotest(4.4)>[shapeInfo]</a>"
 +" <a href=javascript:dotest(4.5)>[stateInfo]</a>"
 +" <a href=javascript:dotest(9)>[reload THIS orientation]</a>"
 +"<br><br>"
// +" <a href=javascript:pollApplet()>[jmolStatus]</a>"
 +" monitor: "
 +getCheckList()

//," JSON data returned:<br><textarea name=outputJSON id=outputJSON rows=5 cols=50></textarea>"
," <input type=checkbox name=idecode id=idecode checked=1>Decoded: <a href=javascript:showoutput()>new window</a><br><textarea name=output id=output rows=5 cols=60 wrap=off></textarea>"
)
remarks=""
//]]>


what="visible"
whatp="centerInfo"
whatm=""

function xshowoutput(s){ if(!s) s=document.getElementById("output").value; dowritenew("<pre>"+s+"</pre>") };function oldshowoutput(){
 dowritenew("<pre>"+document.getElementById("output").value+"</pre>")
}

function dotest(iwhat){
 if(iwhat!=3)monitoron=false
 var s=""
 var sJSON=""
 var info=""
 var sinfo=""
 var sparam=""
 var str=""
 if(iwhat==-1){
   sinfo="appletInfo"
 }else if(iwhat==-2){
   sinfo="animationInfo"
 }else if(iwhat==0){
   str="fileName"
 }else if(iwhat==1){
   str="fileHeader"
   info = jmolGetPropertyAsString(sinfo)
 }else if(iwhat==2){
   str="fileContents"
 }else if(iwhat==3){
   sinfo="orientationInfo"
 }else if(iwhat==3.1){
   sinfo="auxiliaryInfo"
 }else if(iwhat==3.2){
   sinfo="transformInfo"
 }else if(iwhat==3.3){
   sinfo="centerInfo"
 }else if(iwhat==3.4){
   sinfo="boundboxInfo"
 }else if(iwhat==3.5){
   sinfo="zoomInfo"
 }else if(iwhat==4){
   sinfo="modelInfo"
 }else if(iwhat==4.2){
   sparam="PROMPT"
   sinfo="polymerInfo"
 }else if(iwhat==4.3){
   sparam="PROMPT"
   sinfo="chainInfo"
 }else if(iwhat==4.4){
   sinfo="shapeInfo"
 }else if(iwhat==4.5){
   sparam="visible"
   sinfo="stateInfo"
 }else if(iwhat==7){
   sparam="PROMPT"
   sinfo="bondInfo"
 }else if(iwhat==7.5){
   sparam="PROMPT"
   sinfo="moleculeInfo"
 }else if(iwhat==8){
   sparam="PROMPT"
   sinfo="atomInfo"
 }else if(iwhat==8.1){
   sparam="PROMPT"
   sinfo="atomList"
 }else if(iwhat==9){
   info = jmolGetPropertyAsArray("orientationInfo")
   s="load "+jmolGetPropertyAsString("fileName")+";"+info.moveTo
   document.getElementById("cmd").value=s
   jmolScript(s)
 }else if(iwhat==10){
   s=prompt("enter an atom expression",what)
   if(!s)return
   what=s
   s = jmolGetPropertyAsString("extractModel",what)
   var A=jmolGetPropertyAsArray("orientationInfo")
   showoutput(s);   jmolLoadInlineScript(s,A.moveTo)
 }
 if(str!=""){
   s=jmolGetPropertyAsString(str)
 }else if(sinfo!=""){
   if(sparam == "PROMPT"){
     s=prompt("enter an atom expression",what)
     if(!s)return
     what=s
     sparam=what
   }
   if(document.getElementById("idecode").checked){
	s=jmolGetPropertyAsArray(sinfo,sparam)
	s=_jmolEnumerateObject(s,sinfo)
   }else{
	s=jmolGetPropertyAsJSON(sinfo,sparam)
   }
 }
 if(s!="")document.getElementById("output").value=s
}

function parseMessages(A){
 if(!A)return
 var s=""
 for(var i=A.length-1;i>=0;i--){
	s=A[i][3]+"\n"+s
	showmsg("msg",A[i])
 }
 document.getElementById("output").value=s
}

monitoron=0
function domonitor(isiter){
  if(!isiter)monitoron=!monitoron
  if(!monitoron)return
  dotest(3)
  setTimeout("domonitor(1)",delayms)  
}

</script>
</head>
<body>
<script type="text/javascript">showpage(0)</script></body>
</html>

<html>
<head>
<title>Jmol Interactive Examples</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="stylesheet" type="text/css" href="styles.css" />
<script type="text/javascript" src="Jmol.js"></script>
<script type="text/javascript" src="new.js"></script>
<script type="text/javascript">
//<![CDATA[
title="ATOMS";model="caffeine.xyz"

messagecallback="showmsg"
animcallback=""
pickcallback=""
loadstructcallback=""

delayms = 100; delayms0 = 100000


Callbacks=new Array("-atomPicked","fileLoaded","fileLoadError","-frameChanged","-measurePending","-measureCompleted","-measurePicked","-scriptStarted","-scriptEcho","scriptStatus","scriptError","scriptMessage", "-scriptTerminated","-userAction","-viewerRefreshed","-newOrientation")

function getCheckList(){
 var s=""
 var skey=""
 var ischecked=0
 for(var i=0;i<Callbacks.length;i++){
	skey=Callbacks[i]
	ischecked=(skey.charAt(0)!="-")
	Callbacks[i]=skey=skey.replace(/\-/,"")
	s+=" <label><input type=checkbox id='"+skey+"'"+(ischecked?" checked=1":"")+">"+skey+"</label>"
	if((i+1)%4==0)s+="<br>"
 }
 s+=" <a href=javascript:setOptions(1)>all</a> <a href=javascript:setOptions(0)>none</a> "
 return s
}

function getCallbackOptions(){
 var s="monitoring:"
 for(var i=0;i<Callbacks.length;i++)if(document.getElementById(Callbacks[i]).checked)s+=Callbacks[i]
 return s
}


function setOptions(all_or_none){
 for(var i=0;i<Callbacks.length;i++)document.getElementById(Callbacks[i]).checked = all_or_none
}

Scripts=new Array(" "
,' This prototype page illustrates the the use of the draw command. '


,'### lines and planes ###'

	,'load water.xyz;rotate y 20'
	,'draw line1 250 (atomno=1) (atomno=2);color $line1 yellow'
	,'draw line2 300 $line1 (atomno=3);color $line2 white'
	,'draw plane1 300 PLANE (atomno=1) (atomno=2) (atomno=3);color $plane1 green'

,'### curves, arrows, OFFSET, set picking DRAW, and show DRAW ###'
,'# Jmol 10.x.44 introduces the capability to interactively move arrows, curves, points, lines, and planes. This will be further developed.'
,'# The new coordinates are displayed in the Java console.'
	,'load water.xyz;moveto 1.0 130 991 -44 121.7'
	,'draw arrow1 arrow {0 0 -.5} {.2 0 -1} (atomno=2) offset {-.5 -0.3 -.5}'
,'# The OFFSET keyword allows definition based on atoms but with a specified offset so that the arrows do not touch the atoms themselves.'
	,'draw curve1 curve {0 0 .8} {-1 1.8 .8} {.5 1.3 .8}'
,'set picking DRAW'
,'# Drag objects around using the mouse while holding down the SHIFT key; drag single points using the ALT key. When you are done, use <b>show DRAW</b> to see the final placement.'
,'show DRAW'
,'set picking ON'

,'### axis spinning and rotating ###'

	,'load water.xyz;rotate y 20'
	,'draw line1 250 (atomno=1) (atomno=2);color $line1 yellow'
	,'draw line2 300 $line1 (atomno=3);color $line2 white'
	,'spin  $line1 30'
	,'spin  $line2 30'
	,'spin off;rotate  $line1 10;'
	,'spin off;rotate  $line2 10;'
	,'#Note that clicking the end of an axis starts it rotating counterclockwise (shift-left click for clockwise)'
	,'rotate  $line2 10;'
	,'load caffeine.xyz;set picking SPIN 10; #now pick two atoms'
	,'set picking spin 30'
	,'draw line1 300 (oxygen) (nitrogen);'
	,'spin  $line1 30'
	,'draw line2 300 (atomno=9) (atomno=11);'
	,'draw line2 {-2. 0. 0.} {0. 2. 0.};'
	,'spin  $line2 30'
	,'spin off'
	,'load caffeine.xyz;set axes 3;select atomno=4;dots on #several new rotate options'
	,'rotate'
	,'rotate -x'
	,'rotate y 10 (atomno=4)'
	,'set axesMolecular;set axes on'
	,'rotate y 10 molecular (atomno=4)'
	,'rotate z 10 molecular (atomno=4)'
	,'rotate 20 (atomno=8) (atomno=4)'
	,'draw line1 300 (oxygen) (nitrogen)'
	,'rotate 10 $line1'
	,'set axesMolecular;set axes on'
	,'draw line1 {0 0 0} {3 3 0}'
	,'rotate 30 {0 0 0} {3 3 0}'
	,'rotate 20 molecular # defaults to y axis'
,'### PERP -- drawing one object perpendicular to another object ###'

	,'load caffeine2.xyz;draw triangle1 150 (atomno=1) (atomno=14) (atomno=15);'
	,'draw line1 200 PERP $triangle1'
	,'draw line2 PERP 400 (atomno=1) (atomno=14) (atomno=15);'
	,'draw plane2 PLANE 400 (atomno=1) (atomno=14) (atomno=15);'
	,'draw plane2 2.0 PERP PLANE $line2;color $plane2 blue'
	,'draw plane4 2.0 PERP PLANE $line1;color $plane4 blue'
	,'draw plane3 2.0 PERP PLANE ROTATE45 $line1;color $plane3 red'
	,'draw plane2 2.0 PLANE CROSSED $line1 $line2;color $plane2 blue'
	,'draw plane2 2.0 PERP PLANE $line1 REVERSE $line2;color $plane2 blue'

	,'draw triangle1 400'
	,'draw triangle1;color draw red;draw line2 ;color draw blue'
	,'spin $line2 180 60'
	,'spin off'

,'### drawing lines in multiple frames ###'
,'# When atom sets are indicated, if multiple models are being displayed with the FRAME command, the lines drawn will be on a per-model basis. Note that this feature is only available for simple drawn lines, not arrows, curves, or arcs.'
	,'load cyclohexane_movie.xyz;frame 0;draw line1 250 (atomno=2) (atomno=5);draw line2 200 (atomno=4 or atomno=3) (atomno=1 or atomno=6);'
	,'animation on'
	,'animation off;spin  $line1 30'
	,'animation off;spin  $line2 30'
	,'spin off'
	,'animation off'
	,'frame next'
	,'frame prev'
	,'frame play'
	,'frame playrev'

 ,' <a href=javascript:dotest(-1)>[appletInfo]</a>'
 +' <a href=javascript:dotest(-2)>[animationInfo]</a>'
 +' <a href=javascript:dotest(0)>[fileName]</a>'
 +' <a href=javascript:dotest(1)>[fileHeader]</a>'
 +' <a href=javascript:dotest(2)>[fileContents]</a>'
 +'<br><a href=javascript:dotest(8.1)>[atomList]</a>'
 +' <a href=javascript:dotest(8)>[atomInfo]</a>'
 +' <a href=javascript:dotest(7)>[bondInfo]</a>'
 +' <a href=javascript:dotest(7.5)>[moleculeInfo]</a>'
 +" <a href=javascript:dotest(10)>[extractModel]</a>"
 +'<br><a href=javascript:dotest(3)>[orientationInfo]</a>'
 +' <a href=javascript:dotest(3.1)>[auxiliaryInfo]</a>'
 +' <a href=javascript:dotest(3.2)>[transformInfo]</a>'
 +' <a href=javascript:dotest(3.3)>[centerInfo]</a>'
 +' <a href=javascript:dotest(3.4)>[boundboxInfo]</a>'
 +"<br><a href=javascript:dotest(4)>[modelInfo]</a>"
 +" <a href=javascript:dotest(4.2)>[polymerInfo]</a>"
 +" <a href=javascript:dotest(4.3)>[chainInfo]</a>"
 +" <a href=javascript:dotest(4.4)>[shapeInfo]</a>"
 +" <a href=javascript:dotest(4.5)>[stateInfo]</a>"
 +" <a href=javascript:dotest(9)>[reload THIS orientation]</a>"

 +"<br><br>"
// +" <a href=javascript:dotest(11)>[jmolStatus]</a>"
 +" monitor: "
 +getCheckList()


//," JSON data returned:<br><textarea name=outputJSON id=outputJSON rows=5 cols=50></textarea>"
," <input type=checkbox name=idecode id=idecode checked=1>Decoded: <a href=javascript:showoutput()>new window</a><br><textarea name=output id=output rows=5 cols=60 wrap=off></textarea>"
)
remarks=""
//]]>

what="visible"
whatp="centerInfo"
whatm=""

function xshowoutput(s){ if(!s) s=document.getElementById("output").value; dowritenew("<pre>"+s+"</pre>") };function oldshowoutput(){
 dowritenew("<pre>"+document.getElementById("output").value+"</pre>")
}

function dotest(iwhat){
 if(iwhat!=3)monitoron=false
 var s=""
 var sJSON=""
 var info=""
 var sinfo=""
 var sparam=""
 var str=""
 if(iwhat==-1){
   sinfo="appletInfo"
 }else if(iwhat==-2){
   sinfo="animationInfo"
 }else if(iwhat==0){
   str="fileName"
 }else if(iwhat==1){
   str="fileHeader"
   info = jmolGetPropertyAsString(sinfo)
 }else if(iwhat==2){
   str="fileContents"
 }else if(iwhat==3){
   sinfo="orientationInfo"
 }else if(iwhat==3.1){
   sinfo="auxiliaryInfo"
 }else if(iwhat==3.2){
   sinfo="transformInfo"
 }else if(iwhat==3.3){
   sinfo="centerInfo"
 }else if(iwhat==3.4){
   sinfo="boundboxInfo"
 }else if(iwhat==3.5){
   sinfo="zoomInfo"
 }else if(iwhat==4){
   sinfo="modelInfo"
 }else if(iwhat==4.2){
   sparam="PROMPT"
   sinfo="polymerInfo"
 }else if(iwhat==4.3){
   sparam="PROMPT"
   sinfo="chainInfo"
 }else if(iwhat==4.4){
   sinfo="shapeInfo"
 }else if(iwhat==4.5){
   sparam="visible"
   sinfo="stateInfo"
 }else if(iwhat==7){
   sparam="PROMPT"
   sinfo="bondInfo"
 }else if(iwhat==7.5){
   sparam="PROMPT"
   sinfo="moleculeInfo"
 }else if(iwhat==8){
   sparam="PROMPT"
   sinfo="atomInfo"
 }else if(iwhat==8.1){
   sparam="PROMPT"
   sinfo="atomList"
 }else if(iwhat==9){
   info = jmolGetPropertyAsArray("orientationInfo")
   s="load "+jmolGetPropertyAsString("fileName")+";"+info.moveTo
   document.getElementById("cmd").value=s
   jmolScript(s)
 }else if(iwhat==10){
   s=prompt("enter an atom expression",what)
   if(!s)return
   what=s
   s = jmolGetPropertyAsString("extractModel",what)
   var A=jmolGetPropertyAsArray("orientationInfo")
   showoutput(s);   jmolLoadInlineScript(s,A.moveTo)
 }
 if(str!=""){
   s=jmolGetPropertyAsString(str)
 }else if(sinfo!=""){
   if(sparam == "PROMPT"){
     s=prompt("enter an atom expression",what)
     if(!s)return
     what=s
     sparam=what
   }
   if(document.getElementById("idecode").checked){
	s=jmolGetPropertyAsArray(sinfo,sparam)
	s=_jmolEnumerateObject(s,sinfo)
   }else{
	s=jmolGetPropertyAsJSON(sinfo,sparam)
   }
 }
 if(s!="")document.getElementById("output").value=s
}


function parseMessages(A){
 if(!A)return
 var s=""
 for(var i=A.length-1;i>=0;i--){
	s=A[i][3]+"\n"+s
	showmsg("msg",A[i])
 }
 document.getElementById("output").value=s
}

monitoron=0
function domonitor(isiter){
  if(!isiter)monitoron=!monitoron
  if(!monitoron)return
  dotest(3)
  setTimeout("domonitor(1)",delayms)  
}

</script>
</head>
<body onload = "setTimeout('dotest(11)',delayms0)">
<script type="text/javascript">showpage(0)</script></body>
</html>

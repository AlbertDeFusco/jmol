<html>
<head>
<title>Jmol Interactive Examples</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="stylesheet" type="text/css" href="styles.css" />
<script type="text/javascript" src="Jmol.js"></script>
<script type="text/javascript" src="new.js"></script>
<script type="text/javascript">

function callback(a, b, c, d, e, f, g, h, i, j){
alert("a = " + a + " b = " + b + " c = " + c + " d = " + d + " e =" + e + " f = " + f + " g = " + g + " h = " + h + " i = " + i + " j = " + j)
}
animcallback=""
loadstructcallback=""

delayms = 100; delayms0 = 1000
polling = false;


testflag = false

//logLevel=0  // 4 is standard ;1 gives fatal errors only; 2 gives all errors;
              // 3 gives errors and warnings; 4 gives errors, warnings and information; 5 adds debug.

//<![CDATA[
//model = "http://www.rcsb.org/pdb/files/1blu.pdb"
title="ATOMS";

model=';load 1crn.pdb;color temperature;{*}.radius = for(x;{*};x.temperature/20)'

docsearch = document.location.search.substring(1)
if(docsearch.indexOf("model=")>=0)model=unescape(docsearch.split("model=")[1].split("&")[0])

latestVersion = '### Be sure you have the <a href=http://jmol.sourceforge.net/files>Latest version</a>. Very latest may appear here: <a href=http://chemapps.stolaf.edu/jmol/docs/examples-11/Jmol-11.zip>Jmol-11.zip</a>###'

Scripts=new Array(" "

,'This page lists all new features in Jmol 11.8.' 
+' Other pages describe features introduced in <a href=new6.htm>Jmol 11.6</a>,'
+' <a href=new4.htm>Jmol 11.4</a> and'
+' <a href=new2.htm>Jmol 11.2</a>.'
+' Documentation for all commands can be found in the <a href=../index.htm?ver=11.8>Interactive Documentation for Jmol 11.8</a>.'
+' For the complete change log development summary, see <a href=http://jmol.svn.sourceforge.net/viewvc/jmol/trunk/Jmol/src/org/jmol/viewer/Jmol.properties?view=markup>Jmol.properties</a>.'
+' Comments? Suggestions? <a href=mailto:hansonr@stolaf.edu>Bob Hanson</a>'


,latestVersion

,'### CASTEP and AIMS readers ###'
,'# Jmol 11.8.1 adds readers for CASTEP (<a href=http://www.castep.org/>http://www.castep.org</a>) and AIMS (<a href=http://www.fhi-berlin.mpg.de/aims/>http://www.fhi-berlin.mpg.de/aims</a>). In the case of some AIMS files, which may not have suitable identifying characteristics, one must force the reader by prepending "aims::" to the file name.'
,'load castep.cell'
,'load f2.in'
,'load f1.in # a problem --- just "atom" statements'
,'load "aims::f1.in" # forcing the aims reader to be used'
  
,'### draw SYMOP and x = all.symop() ###'
,'# Jmol 11.8.1 introduces drawing of crystallographic symmetry operations such as C<sub>3</sub> axes, rotation-inversion axes, screw axes, mirror planes, and glide planes. In addition, the symop() function allows both retrieving of the draw commands and obtaining the point that is generated by the operation. In Jmol 11.8.1 an atom set such as "all" must be indicated; Jmol 11.8.4 makes this the default, but "print symop(3, {atomindex=3})", for example, determines the unit cell based on that for {atomindex=3}. The first atom of this atom set is used to specify which unit cell to use. For a nice application of this, see the <a href=jcse/explore.htm>Jmol Crystal Symmetry Explorer</a>. Also check out the new <a href=jcse/sympop.png>popup-menu</a>.'
,'load quartz.cif packed;moveto /* time, axisAngle */ 1.0 { -987 -136 -88 64.66} /* zoom, translation */  100.0 0.0 0.0  /* center, rotationRadius */ {1.2289999 2.1286902 2.7027001} 5.8060317 /* navigation center, translation, depth */ {0.0 0.0 0.0} -11.518293 28.7624 0.0;print script("show spacegroup").split("employed:\n")[2]'
,'draw SYMOP 3 {atomno=2} # draw symmetry operation 3 showing the operation on the second atom'
,'draw SYMOP 3 {atomno=4}'
,'draw SYMOP "-x+y,-x,z+1/3" {atomno=4}'
,'print all.symop(3, {atomno=2})'
,'print all.symop("x,-y,1/2-z",{atomno=1}) # arbitrary operation'
,'print all.symop(3, {atomno=2},"sym1") # get drawing commands'


,'### set imageState ###'
,'# Jmol 11.8.1 now by default saves its state in a JPG or PNG file created with the <b>write</b> command. These images can then be loaded back into Jmol using the <b>load</b> or <b>script</b> command or by dragging and dropping into the Jmol applicaiton. To turn this feature off (for more compact JPG or PNG files), use <b>set imageState FALSE</b>.'



,'### select structureID = "xxx" ###'
,'# Jmol 11.8.1 allows selection of residues based on their structure IDs.'
,'load 1crn.pdb;cartoons only;color structure'
,'print getproperty("FileInfo","helix")'
,'display structureID = "H1"'
,'display structureID = "H2"'
,'print getproperty("FileInfo","sheet")'
,'display structureID = "S1"'


,'### label positioning using the mouse ###'
,'# Jmol 11.8.1 allows moving a label simply by <b>set picking label</b> followed by holding the ALT key down while dragging an atom (the atom itself, not its label).'
,'load caffeine.xyz;labels on;'
,'set picking label # now drag atoms around.'

,'### lone pair and radical cartoons ###'
,'# Jmol 11.8.1 introduces "lone pair" and "radical" dots that can be placed similarly to orbital cartoons using the <b>lcaoCartoon</b> command.'
,'load caffeine.xyz;moveto /* time, axisAngle */ 1.0 { -879 -235 416 91.77} /* zoom, translation */  203.21 0.0 0.0  /* center, rotationRadius */ {-0.23140144 0.61279976 0.071704745} 5.580881 /* navigation center, translation, depth */ {0.0 0.0 0.0} 6.4335065 -1.3728551 0.0;'
,'select {oxygen}[1]; lcaocartoon lonePair "sp2a"'
,'select {oxygen}[1]; lcaocartoon lonePair "sp2b"'
,'select {oxygen}[2]; lcaocartoon radical "pz"' 



,'### getProperty "fileInfo" ###'
,'# Jmol 11.8.1 allows loading file information from PDB and CIF files directly into variables. Formerly this was "PdbInfo". For PDB REMARK records, the remark number is given with the word REMARK.'
,'load 1crn.pdb'
,'print getProperty("FileInfo","REMARK1")'
,'print getProperty("FileInfo","REMARK3")'
,'load dickite.cif {1 1 1};set echo bottom left; echo @{getProperty("FileInfo","models",1,"_journal_name_full")}; '		

 

,'### set quaternionframe "a" ###'
,'# Jmol 11.8.1 adds "alpha-carbon-only" quaternion frames for calculation of local helical axes for proteins that have only alpha carbons. This allows visualization of helices and '
,'load 1JGQ.pdb;moveto /* time, axisAngle */ 1.0 { -172 -951 -257 69.98} /* zoom, translation */  461.26 0.0 0.0  /* center, rotationRadius */ {-25.56479 59.732933 229.84937} 191.99068 /* navigation center, translation, depth */ {0.0 0.0 0.0} 182.759 130.35487 0.0;'
,'select *:M;center selected;set quaternionframe "a"; draw helix axis;set quaternionframe "p"'

,'### VRML and X3D support ###'
,'# Jmol 11.8.1 adds nearly full VRML and X3D support. Caveates include: no label backgrounds, no background image, label sizes are approximations, no ellipsoid quadrant cutouts, and slightly irregular trace when displayed with a very small diameter'
 
,'### [x,y,z].sum2 or {xxx}.someProperty.sum2 ###'
,'# Jmol 11.8.1 adds a sum-squared calculation for arrays or properties '
,'load 1crn.pdb'
,'print all.temperature.sum2'
,'print [1,2,3,4].sum2'

,'### isosurface select {....} SET n ###'
,'# Jmol 11.8.1 allows display of selected sets within an isosurface that has more than one distinct set of surfaces. The volume or area of that set can then be determined specifically.'
,'load 1crn.pdb'
,'isosurface cavity sasurface 0'
,'isosurface cavity sasurface 0 set 1'
,'isosurface cavity sasurface 0 set 2'
,'isosurface cavity sasurface 0 set 3'
,'isosurface area cavity sasurface 0 set 3'
,'isosurface volume cavity sasurface 0 set 3'
,'isosurface area cavity sasurface 0 set 3'


,'### set helixStep ###'
,'# Jmol 11.8.1 allows setting the helix step for calculating quaternion differences for proteins to any number of residues. So, for example, with <b>set helixStep 2</b>, Jmol will calculate the quaternion difference for residue <i>i</i> as <i>q<sub>i</sub></i>/<i>q<sub>i-2</sub></i> rather than <i>q<sub>i</sub></i>/<i>q<sub>i-1</sub></i>. This allows for straightness calculations and drawing of local helical axes that take into account situations where the helical repeat is every other residue (for instance) rather than every residue.' 

,'### helix(pt1, pt2, dq,"...") function ###'
,'# a second form of the helix function (Jmol 11.8.1) allows general definition of local helical parameters based on any two points and their quaternion difference. '
,'print helix({0 0 0}, {1 1 1}, quaternion(1 0 1 0), "array")'

,'### helix({atom expression},"...") function ###'
,' Jmol 11.8.1 <img align=right src=img/helixaxis2.png> exposes the new quaternion features of Jmol in a single powerful function. A quaternion describes the orientation of a frame (an orthogonal set of XYZ axes) relative to a reference frame. Given two frames, <b><i>A</i></b> and <b><i>B</i></b>, one can determine their quaternion difference, which represents the rotation required to transform the orientation at <b><i>A</i></b> to the orientation at <b><i>B</i></b>. For proteins, Jmol automatically defines a quaternion frame for each residue. (The exact definition of the frame depends upon the setting of <b>set quaternionframe</b>.) The helix() function allows the user to determine the <b>local helical axis</b>, <b><i>n</i></b>'
 +' of an amino acid. The simplest form of the helix command is based on these assigned quaternions. Options indicate what sort of information is being requested. These include "point" (position of the local helical axis, <b><i>A\'</i></b>), "axis" (local helical axis, <b><i>n</i></b>), "radius" (local helical radial vector, <b><i>r</i></b>), "angle" (angle of rotation, in degrees), "measure" (a measurement command showing the angle and translation along <b><i>n</i></b>), "draw" (a draw command generating an arrow representation of the local helical axis), and "array", which delivers an array of four points consisting of the local helical axis point, axis vector, and radius vector in {x,y,z} format and the {angle, helical pitch, and residues per turn} as a fourth "point." If no second parameter is given, "array" is assumed.'
 +' If pitch = 0, then the direction of <b><i>n</i></b> is indeterminant and its length is 0. In that case, Jmol reports a vector of length 1 for "axis" and a corresponding angle in the range (-180,180] degrees. The pitch given by the "array" option will be 0 in that case. An integer first parameter will be interpreted as a residue number. '
 +' The calculation refers to the axis getting to that residue <b>from the previous residue</b>.'
,'load 1crn.pdb;moveto /* time, axisAngle */ 1.0 { 322 760 -565 136.81} /* zoom, translation */  430.55 22.0 1.0  /* center, rotationRadius */ {3.116 6.899833 0.9201667} 26.248955 /* navigation center, translation, depth */ {0.0 0.0 0.0} -16.974018 11.449811 0.0;select 14-18;display selected;cartoons on;color cartoons translucent 0.7;'
,'print helix({resno=16},"angle")'
,'print helix({resno=16},"axis")'
,'print helix({resno=16},"point")'
,'print helix({resno=16},"radius")'
,'print helix({resno=16},"array")'
,'print helix({resno=16},"draw")'
,'print helix({resno=16},"measure")'
,'print helix({resno=16}) # same as "array"'
,'script inline @{helix({resno=16},"draw")} # create the vector'
,'script inline @{helix({resno=16},"measure")} # toggle the measure'
,'print "the radius is " + (0.0+helix(16)[3]) + " angstroms"'
,'print "the angle is " + helix(16)[4].x%2 + " degrees"'
,'print "the pitch is " + helix(16)[4].y%2 + " angstroms per turn"'
,'print "there are " + helix(16)[4].z%2 + " residues per turn"'

,'### draw ARC ###'
,'# Jmol 11.7.47 allows drawing of arcs in 3D based on center position and either a defined axis point or a plane. The default scale is an overall diameter (SCALE) of 1.0 Angstrom and a line diameter (DIAMETER) of 0.1 Angstroms.'
,'load caffeine.xyz'
,'draw ARC {0 0 0} {1 0 1 0}'
,'draw ARC {atomno=3} {1 0 1 0}'
,'draw scale 2.0 ARC {atomno=3} {1 1 1 0}'
,'draw ARC {atomno=3 or atomno=8} {atomno=8}'
,'draw diameter 0.05 ARC {atomno=3 or atomno=8} {atomno=8}'
,'draw diameter 0.05 ARC {atomno=3} {atomno=8} {atomno=7} {90 120 0.25}  # starting at 90 degrees referenced to atom 7 draw a 120-degree arc positioned 25% of the way along the axis from atom 3 to atom 8.'
,'isosurface plane {1 2 1 3} color translucent white; draw ARC {atomno=3} {1 2 1 3} {atomno=7} {90 120 0.25} # starting at 90 degrees referenced to atom 7 draw a 120-degree arc positioned 25% of the way along the axis from atom 3 to plane x + 2y + z + 3 = 0.'

,'### draw CIRCLE ###'
,'# Jmol 11.7.47 allows drawing circles in 3D based on center position and either a defined axis point or a plane. The default scale is a diameter of 1.0 Angstrom for a point center and the nominal molecular radius for an atom center. But the DIAMETER or SCALE can be set as well.'
,'set antialiasdisplay;load caffeine.xyz'
,'draw CIRCLE {0 0 0};spin on;delay 5;spin off # a 2D circle'
,'draw CIRCLE {0 0 0} {1 1 0 0}'
,'draw CIRCLE {atomno=3} {0 1 1 0}'
,'draw scale 0.5 CIRCLE {atomno=3} {0 1 1 0}'
,'draw diameter 2.0 CIRCLE {atomno=3 or atomno=8} {atomno=8}'



,'### JmolData.jar ###'
,'# Jmol 11.7.46 introduces a totally graphic-less Jmol application, JmolData.jar. This application carries out all the data loading and processiong functionality of Jmol without any graphics capability. The intention is to have a generic scriptable processor for servers or data analysis projects that has all the power of Jmol scripting but no reliance on X-Windows or other graphics capability on the server.'
 

,'### SHOW VARIABLES and SHOW TRACE ###'
,'# Jmol 11.7.45 adds the VARIABLES option to the SHOW command. In addition, you can add SHOW TRACE anywhere in a script to give a listing of filenames and functions that have been called leading up to that point in the script.'
,'a = 3;b=6;show variables'
,'function testit;var b = 3;var c = 5;show variables;end function; testit;'
,'function testit;show trace;end function; testit;'

,'### Script Editor for Application and Applet ###'
,'# Jmol 11.7.45 adds a script editor -- a document panel that can be used to test scripts, including stepping through them step by step. The script editor is accessed via the console.'
,'console # now click on "Editor", enter some commands, and press "Run"'


,'### getProperty("PDBInfo") ###'
,'# Jmol 11.7.45 allows extraction of the PDB file header information by type. REMARK records are retrieved by adding the number to the word "REMARK" with no spaces.'
,'load 1crn.pdb'
,'print getProperty("PDBInfo","AUTHOR")'
,'print getProperty("PDBInfo","SOURCE")'
,'print getProperty("PDBInfo","COMPND")'
,'print getProperty("PDBInfo","REMARK1")'


,'### single and double quotes ###'
,'# Jmol 11.7.45 allows for single or double quotes (like JavaScript) to be used for strings. The exception is that the commands that do not require quotes because their entire command is necessarily a string (cd, echo, goto, help, hover, javascript, label, message, and pause) will take a single quote to be part of the string, as for prior versions. This allows more flexibility and less complicated JavaScript- and command line-referencing.'
,'print \'this is a test\'.find(\'a\')' 

,'### MO LIST and SHOW MO LIST ###'
,'# Jmol 11.7.44 adds the capability to inspect the full set of molecular orbitals for a file in list format.'
,'load C6H6.smol; mo homo'
,'MO LIST'
,'SHOW MO LIST'

,'### equivalence of label() and format() functions ###'

,'# Jmol 11.7.44 merges the label() and format() functions. They are now equivalent. Both can be applied to atoms, bonds, or any other value. Note that the label <i>command</i> is still a distinct quantity; there is no format command.'
,'load caffeine.xyz'
,'label %a'
,'print all.label // displayed label'
,'print all.format // same'
,'print all.label() // default label'
,'print all.format() // same'
,'print all.format("%a %i") // new format'
,'print {oxygen}.format'
,'{oxygen}.format = "%[atomno] %[element]"'
,'x = random(100);print format("this is a %s -- x=%0.3f, which rounds to %i","test",x,x) // preferred'
,'x = random(100);print label("this is a %s -- x=%0.3f, which rounds to %i","test",x,x) // equivalent'
,'print [3,4,5,6].format("value = %i")'
,'print 0.0033567.format("%8.2e")'
,'print 0.0033567.label("%-8.2e")'

,'### new format() function ###'
,'# Jmol 11.7.43 adds the format() function, which is similar to the Java/C++ printf method in that it creates a string that is filled with values based on formatting information. Each variable is placed in the string based on a code starting with % and ending with one of the characters i (or d) for integer, f for floating point, s for string, p for point, or q for quaternion/plane/axis-angle. In between these two characters can be a number indicating the width of the field, the precision of the floating point numbers, and whether the field is to be zero-filled from the left or left-justified. (The default is right-justified without zero filling. For p and q, the default is "6.2" indicating a field 6 characters wide right-aligned with two decimal places for numbers; for other values the default is full precision and whatever width is required. Options include %d or %i (integer), %f (decimal float), %e (scientific notation), %s (string), %p (point), and %q (quaternion/axisangle/plane). A negative sign after the period in a float format instructs Jmol to use scientific notation: "%8.-3f" is equivalent to "%8.3e". (This is more important in atom labels, where "f" is replaced by the atom property, and the - sign is needed to specify scientific notation.)'
,'load caffeine.xyz'
,'x = random(100); print format("the value of %s is %3.2f,\\nwhich rounds to %i","THIS",x, x)'
,'x = random(100); print format("%10s\\t%10s\\t%10s\\n%10s\\t%10.2f\\t%10i","name","value","rounded","THIS",x, x)'
,'x = random({*})%0; print format("%-5s%-6s%-10s%-10s\\n%-5i%-6s%-10i%p","n","name","bondcount","xyz",x,{*}[x].atomName,{*}[x].bondcount, {*}[x].xyz)'
 
,'### property modelindex ###'
,'# Jmol 11.7.42 adds the modelindex property. This is a sequential number starting from 0 for all models in all files.'
,'load files "1crn.pdb" "caffeine.xyz" "1d66.pdb";frame 1'
,'color atoms property modelindex'
,'frame 1'
,'frame 2'
,'frame 3'
,'frame 0.0'


,'### load("filename",nBytesMax) ###'
,'# Jmol 11.7.42 adds the capability to load just a limited number of bytes from a file. If this number is 0, then no bytes are read -- provided the file exists. If the file does not exist, this function returns the error message. Thus, <b>if(load("myfile",0)=="")</b> tests for if the file exists.'
,'pdbid = "1crn";if (load(pdbid + ".pdb", 0) == "") {load @{pdbid + ".pdb"}} else {load @{"=" + pdbid}}'
,'pdbid = "1crp";if (load(pdbid + ".pdb", 0) == "") {load @{pdbid + ".pdb"}} else {javascript alert(\'file not found\')}'



,'### standard JavaScript/Java flow control ###'
,'# Jmol 11.7.41 introduces standard scripting use of { } around for, if, else, else if, and while phrasings. Commands can be single or multi line, as in these other languages.'
,'load caffeine.xyz'
,'for (i = 0; i < 10;i++){ rotate x 10; delay 0.1 }'
,'for (i = 0; i < 10;i++)rotate x 10; delay 0.1  // brackets not required when commands are all on the same line'
,'if ({atomno=3}.radius < 0.35){ print "it is smaller"} else {print "it is larger"}'
,'if ({{*}[3][10]}.radius < 0.35) print "they are smaller on average" else print "they are larger on avarage"'
,'i = 0; while (++i < 10){spin @{!_spinning}; delay 1}'

,'### standard JavaScript/Java math syntax support ###'
,'# Jmol 11.7.41 supports the more common math operators in JavaScript and Java: ++, --, +=, -=, *=, /=, \\=, &=, and |=. These operators also work on array and atom expression properties.'
,'load caffeine.xyz;i = 0'
,'print ++i #click me more than once'
,'i += 5; print i'
,'i *= 6; print i'
,'for (i = 0; i < 10;i++){ {atomno=3}.radius += 0.1; delay 0.1 }'
,'for (i = 0; i < 10;i++){ {atomno=3}.radius -= 0.1; delay 0.1 }'

,'### load "@varName" ###'
,'# Jmol 11.7.40 adds the capability to load data from a variable just as easily as from a model file. This then is a simpler and more flexible alternative to the <b>data "MODEL"</b> command. You simply need to have the model data in a variable and indicate the variable name with an @ sign <b>in quotes</b>. (If you don\'t put the variable in quotes, Jmol will think you are specifying the file name in the variable, not the actual data. This could be useful when it is desired to extract information from a model prior to displaying it. It is recommended to clear the variable after using it, or a large model will consume considerable memory and will be saved in the state as well, which is probably not necessary.'
,'load 1crn.pdb;rotate y 90 3 # normal way'
,'x = load("1crn.pdb") # x now contains the file data'
,'zap;load "@x";reset x # same thing! -- clearing the variable now'
,'x = load("quartz.cif");zap # the model is in variable x'
,'print x'
,'load "@x" {2 2 2};reset x'
 
,'### settable radius, color, and label ###'
,'# Jmol 11.7.40 allows for reading and changing the spacefill radius and label of an atom programmatically as well as selecting atoms by label.'
,'load caffeine.xyz'
,'{*}.label = for(x;{*};x.distance({0 0 0}))'
,'{*}.label = {*}.radius.all'
,'{*}.color = for(x;{*};(x.radius < 0.3 ? "red" : "blue"))'
,'load 1crn.pdb;color temperature;{*}.radius = for(x;{*};x.temperature/20)'


,'### inline FOR function ###'
,'# Jmol 11.7.40 introduces the inline FOR function, which allows creation of a list of values based on processing of individual atom properties in a set of selected atoms. The syntax is similar to the <b>select()</b> function: <b>for(dummyVariable;{atom expression};math expression)</b>. The real power is that the result is a list that can be mapped back onto the atoms as a new or replacement property.' 
,'load 1crn.pdb'
,'pt = {0 0 0};{*}.property_dist = for(x;{*};x.distance(pt));color property_dist'
,'pt = {*}.xyz;{*}.radius = for(x;{*};x.distance(pt)/pt)'
 

,'### inline IF function (two versions) ###'
,'# Jmol 11.7.40 adds two forms of inline IF function that works like the Java or JavaScript xxx = (booleanExpression ? ifTrue : ifFalse). There are two valid syntaxes. The first uses semicolons: <b>xxx = if(booleanExpression; ifTrue; ifFalse)</b>. The second is the same as Java and Javascript: <b>xxx = (booleanExpression ? ifTrue : ifFalse)</b>. By itself this is just a convenience; with other recent enhancements, it is very powerful.'
,'load 1crn.pdb'
,'ave = {*}.bonds.length; print if(ave < 1.5 ; "shorter than 1.5" ; "not so short")'
,'set echo top left; echo "@{(random(1) < 0.5 ? \\"she loves me\\" : \\"she loves me not\\")}"# run the mouse over the model to see how lucky you are today'
 
,'### Materials Studio .xsd reader ###'
,'# Jmol 11.7.40 adds a reader for polymeric structures created using <a href=http://accelrys.com/products/materials-studio/>Materials Studio</a>. For now, at least, individual "molecules" are loaded into separate models.'
,'load PolyBisphenol.xsd'
,'color group'
,'label "%[resno]"'
,'selectionhalos on;select resno=1;delay 1;select resno=2;delay 1;select resno=3;delay 1;select none'

 
,'### atom property upgrade ###'
,'# Jmol 11.7.40 adds extensive support for working with atom properties. See <a target="_blank" href="../index.htm#atomproperties">the interactive documentation</a> for details.'
,'load 1d66.pdb;selectionhalos on;select none'
,'select atomName="CA"'
,'select group="ARG"'
,'select (chain="A" or chain="B") and helix'
,'load quartz.cif {2 2 2};selectionhalos on;select none'
,'select cell=555'
,'select connected({element="Si"}[3])'
,'print {element="Si"}[3].bonds.label("%[atomName]1 %[symmetry]1 %[atomName]2 %[symmetry]2 %4.3LENGTH")'

,'### label %[structure] %[strucNo] ###'
,'# Jmol 11.7.40 adds a new way to specify label parameters, and with that, two new options. <b>%[structureType]</b> reports "helix", "sheet", "turn", or "none"; <b>%[strucNo]</b> adds to that a unique identifying number.'
,'load 1crn.pdb;cartoons only;color cartoons structure; color cartoons translucent;'
,'select *.ca; wireframe on; label %[structure]'
,'select *.ca; wireframe on; label %[structure]%[strucNo]'

,'### color hbonds energy ###'
,'# Jmol 11.7.39 adds the capability to display hydrogen bonds with a color range of blue to red based on DSSP-calculated strength.'
,'load 1crn.pdb;wireframe off;spacefill off;hbonds calculate;hbonds 0.3;color hbonds energy'
,'select within(group,connected(1,2,HBOND));wireframe 0.15'

,'### load XYZ ###'
,'# Jmol 11.7.39 adds the capability to just load atom coordinates, not the full structure. This allows loading a new set of atom data without changing color/label/orientation settings.'
,'load "cyclohexane_movie.xyz" 1;color atoms property atomno;wireframe;rotate x 30; rotate y 30'
,'load XYZ "cyclohexane_movie.xyz" 2 # just the atoms, one frame'
,'load XYZ "cyclohexane_movie.xyz" 3'
,'load XYZ "cyclohexane_movie.xyz" 4'

,'### load VIBRATION and set loadAtomDataTolerance ###'
,'# Jmol 11.7.38 introduces the capability to apply vibrational data from one file to model data in another. Adding VIBRATION to the load command instructs Jmol to load only the vibrational information from a file. The vibrational data are applied to the currently selected set of atoms. All standard load parameters are accepted, although many will be ignored, however whereas the default for a normal LOAD operation is to load all files, the default for LOAD VIBRATION is to read only the first set of vibrational data in a multi-model file. For each "atom" position and vector that is read, Jmol applies the vibration to all selected atoms having a unit cell normalized position within <b>loadAtomDataTolerance</b> (default 0.01) Angstroms of the position read from the file. If the file being loaded contains embedded Jmol script commands, those commands will be processed after the application of the vibrational vectors. For example, <b>load "myfile.struct" {{5 5 1}} PACKED; select _O; load VIBRATION "vibs.xyz" 3</b> first loads a set of unit cells from myfile.struct, then applies only to the oxygen atoms the third vibration set found in vibs.xyz. All oxygen atoms in all unit cells are given vibrational vectors even though the data in vibs.xyz might only be for one unit cell.'
,'load "SrTiO3.struct" {3 3 3} PACKED;vibration on;rotate x 20;rotate y 20;zoom 400'
,'set loadAtomDataTolerance 0.1 # too low for this dataset -- missed the oxygens'
,'load VIBRATION "STOa.v.xyz" 1;set echo bottom left; echo @{_vibrationName}'
,'set loadAtomDataTolerance 0.2 # this data set needs a higher tolerance'
,'load VIBRATION "STOa.v.xyz" 1;set echo bottom left; echo @{_vibrationName}'
,'load VIBRATION "STOa.v.xyz" 2;set echo bottom left; echo @{_vibrationName}'
,'load VIBRATION "STOa.v.xyz" 3;set echo bottom left; echo @{_vibrationName}'
,'load VIBRATION "STOa.v.xyz" 4;set echo bottom left; echo @{_vibrationName}'



,'### load {a b -c} or load {a b c} PACKED ###'
,'# Jmol 11.7.37 allows packing of large number of cells by setting the third cell parameter negative or using the PACKED option'
,'load hydroxy.struct {10 1 -10}'
,'load hydroxy.struct {10 1 10} packed # same'

,'### select within(-x.x, {point or atom expression}) ###'
,'# Starting with Jmol 11.7.37, you can select atoms based on distance from a point or set of atoms calculated as a unit cell position.'
,'load hydroxy.struct {555 757 1} PACKED;rotate x 20'
,'select within(-0.1,atomno=3);spacefill on'
,'{within(-0.1,atomno=3)}.vxyz={0 0 1/2};set vibrationScale 0.3;set vibrationperiod 0.4;vibration on;'
,'select within(-0.1,atomno=2);spacefill on'
,'{within(-0.1,atomno=2)}.vxyz={1/2 0 0};set vibrationScale 0.2;set vibrationperiod 0.4;vibration on;'

,'### unit cell coordinates ###'
,'# Jmol 11.7.37 introduces coordinate transformation functions .fxyz, .uxyz, and .xyz, and coordinate functions .ux, .uy, and .uz. The u-based functions allow selecting atoms and specifying coordinates based on unit cell coordinates within the range [0,1). The .xyz function now can be used to transform a fractional coordinate in decimal, {0.5, 1, 1} for instance, to Cartesian coordinates. The unit cell used for the .xyz function is the one currently set using <b>unitcell nnn</b>.'
,'load TiO.struct {444 666 1} PACKED;rotate x 20;connect {*} {*} delete;selectionhalos on;select atomno=103'
,'print {atomno=103}.xyz'
,'print {atomno=103}.fxyz'
,'print {atomno=103}.uxyz'
,'unitcell 555; print {0.5 1 1}.xyz'
,'unitcell 556; print {0.5 1 1}.xyz # with the unit cell further along the Z axis, the Z coordinate is larger'
,'unitcell 555; print {atomno=103}.fxyz'
,'unitcell 556; print {atomno=103}.fxyz # with the unit cell further along the Z axis, the fractional Z coordinate of the point is smaller'

,'### new .find("pattern","flags") option ###'
,'# Jmol 11.7.36 adds a two-parameter option to the .find() command allowing for broader string searching capability. The first parameter is a <a href=http://java.sun.com/j2se/1.4.2/docs/api/java/util/regex/Pattern.html>pattern</a>. The second parameter is a set of flags: <b>i</b> (case-insensitive), <b>v</b> (reverse), <b>m</b>(return match). The function works on both strings and lists. With a string, <b>v</b> returns "false" if the string contains the match or "true" if not; with lists, <b>v</b> returns all elements of the list that do not contain the match. The <b>m</b> option allows returning only the portion of the string that matches (or, with <b>vm</b> only the portion of the string that does NOT match). With lists, both <b>m</b> and <b>vm</b> return only elements that contain the match, but, as for strings, each element is returned as just the matching phrase or the reverse.'
,'print "this test is a Test".find("Test")'
,'print "this test is a Test".find("Test","")'
,'print "this test is a Test".find("Test","i")'
,'print "this test is a Test".find("Test","m")'
,'print "this test is a Test".find("Test","v")'
,'print "this test is a Test".find("\\\\stest","m")'
,'print "this test is a Test".find("\\\\stest","vm")'
,'print script("show spacegroup all").split().find("Hall symbol:")'
,'print script("show spacegroup all").split().find("Hall symbol:").find("primitive","v")'
,'print script("show spacegroup all").split().find("Hall symbol:").find("primitive","v").find("Hall symbol:","vm")[1][3]'
 

,'### Wien2k .struct file reader ###'
,'# Jmol 11.7.36 adds a <a href=http://www.wien2k.at/>Wien2k DFT</a> structure file reader and fixes a bug in the PACKED option. Also, a new PACKED option with {ni nj hk} makes '
,'load Andalusite.struct'
,'load Andalusite.struct {1 1 1}'
,'load Andalusite.struct PACKED'
,'load Andalusite.struct {444 555 -1};isosurface interior cavity 0.2 # not fully dense?'
,'load Olivine.struct PACKED'
,'load SrTiO3.struct PACKED'
,'load SrTiO3.struct {444 666 -1} # packed 3x3x3 set'
,'load SrTiO3.struct {3 3 3} PACKED # new alternative -- same as {555 777 -1} '
,'load Ti2O3.struct # rhombohedral'
,'load Ti2O3.struct PACKED # packed  -- rhombohedral'
,'load Ti2O3.struct {4 4 1} PACKED # packed 4x4x1 layer -- rhombohedral'
,'load TiO.struct PACKED;connect {_Ti} {_Ti} delete # removing Ti links'
,'load FeF2.struct PACKED'
,'load hydroxy.struct PACKED'
,'load NiCO3.struct PACKED'


,'### Jmol and Flot ###'
,'# See <a target=_blank href=jmol-flot.htm>jmol-flot.htm</a> and <a target=_blank href=jmol-flot-energy.htm>jmol-flot-energy.htm</a>  for an interesting way to get graphical output from Jmol in an easily programmable way using <a target=_blank href=http://code.google.com/p/flot/>Flot</a>. The files used for this are in the <a target=_blank href=flot>flot</a> subdirectory. Note that I did need to adapt the jquery.flot.js a bit to do the sort of plotting I was interested in. I added axes.majorTicks for the bold lines in the Ramachandran plot, added an options.grid.hoverDelay variable, and also added a selection.hoverMode option to allow hovering over a vertical stripe, not just a point. Note how the callbacks from Flot are used to highlight groups on the structure. This little experiment shows that we have a bit of work to do on straightness. We are working on that and may end up modifying the straightness(c) definition, as it seems to be off by one residue in comparison to DSSP (plot straightness(c) or straightness(p) and structure to see how that works). '

,'### new %G label option -- "group index" ###'
,'# Jmol 11.7.35 adds the %G label option. The "group index", like the "atom index" runs from 0 to n where n is the number of groups in the entire set of loaded models. This was needed for the Flot graphing so that multiple chains are not overlaid.'
,'load 1d66.pdb;cartoons only;color chain;'
,'select 10 and (*.CA or *.P);label %n %r:%c  (%G)'

,'### trailing * for draw/isosurface ID wildcards ###'
,'# Jmol 11.7.35 adds the option to specify trailing wildcards for object IDs.'
,'load 1crn.pdb'
,'ramachandran draw'
,'draw psi* off;draw phi* off # just the planes'
,'draw * on'
,'draw *i* off # note that you can use leading and trailing wildcards'

,'### ramachandran DRAW ###'
,'# Jmol 11.7.35 adds the ability to visualize the dihedral planes and angles for an amino acid residue.'
,'load 1crn.pdb;moveto /* time, axisAngle */ 1.0 { -396 724 -565 55.22} /* zoom, translation */  1202.76 0.0 0.0  /* center, rotationRadius */ {5.3345723 13.705572 -2.6008575} 26.544504 /* navigation center, translation, depth */ {0.0 0.0 0.0} -141.38745 166.32503 50.0;select 22;display {within(group,within(5,selected))};wireframe only'
,'ramachandran draw'

,'### escaping "?" with "\\?" ###'
,'# Jmol 11.7.34 allows the single-character wildcard character ? to be escaped in atom names.'
,'load qtest.cif;rotate y 60;selectionhalos on;select O*;label %a;font labels 14;select none'
,'select O* # all the O atoms'
,'select O? # all the two-letter O atoms'
,'select O3? # both O3 and O3?'
,'select ?\\? # all the two-letter atoms ending in "?"'
,'select ?\\? or ??\\? or ???\\? # all the atoms ending in "?"'
,'select O* and !(O\\?,O?\\?) # all oxygens except the ones with "?"'

,'### Gaussian reader reads Natural Orbitals ###'
,'# With Jmol 11.7.33, you can visualize NBOs using Gaussian and the " $NBO AONBO=P $END" option. As for GAMESS, by default ALL MOs are read -- standard and NBOs. By excluding standard MOs with the FILTER "NBO" option to the load command, you can specify to only read NBOs. The filter "!NBO" selects all except NBOs.'
,'load aceticacid_nbo.log FILTER "NBO";frame 1.2;moveto /* time, axisAngle */ 1.0 { -730 271 628 48.66} /* zoom, translation */  100.0 0.0 0.0  /* center, rotationRadius */ {0.09167004 -0.10112792 -0.09820557} 3.2706163 /* navigation center, translation, depth */ {0.0 0.0 0.0} -1.9288025 -1.3944092 50.0;'
,'mo 1'
,'mo 2'
,'mo next'

,'### GAMESS reader reads Natural Orbitals ###'
,'# With Jmol 11.7.32, you can visualize NBOs using GAMESS and the " $NBO AONBO=P $END" option. By default ALL MOs are read -- standard and NBOs. By excluding standard MOs with the FILTER "NBO" option to the load command, you can specify to only read NBOs. The filter "!NBO" selects all except NBOs.'
,'load acetic_acid.gamess FILTER "NBO"'
,'mo 1'
,'mo 2'
,'mo next'

,'### frame ALIGN {atomexpression} ###'
,'# Jmol 11.7.31 introduces a way to align structures across a set of frames. This is important for certain animations. The atom expression is evaluated per frame, and the resultant point is aligned in each case.'
,'load cyclohexane_movie.xyz;moveto /* time, axisAngle */ 1.0 { -506 794 338 58.17} /* zoom, translation */  100.0 0.0 0.0  /* center, rotationRadius */ {0.76470006 1.20345 -0.3620001} 4.302908 /* navigation center, translation, depth */ {0.0 0.0 0.0} 11.337445 2.553384 50.0;'
,'frame align none;animation on # original (default)'
,'frame align {*};animation on # a bit nicer -- aligned on molecular center of each frame'
,'load pro.zip;animation on # jumpy problem...'
,'load pro.zip;frame align {C2};animation on # ...solved'

,'### molecular orbital animation ###'
,'# Jmol 11.7.31 can read and display molecular orbitals for more than one model. Molecular orbitals are created for all visible frames. Animation then displays these orbitals as the frames change.'
,'load pro.zip|1-propanol.Prof.M0001_1.spardir'
,'frame 0;mo HOMO;frame 1 # note that it can take a few moments to generate the orbitals'
,'animation on'
,'frame 1.1'
,'animation next'
,'animation prev'

,'### Spartan Energy Profiles ###'
,'# Jmol 11.7.31 reads all models within an energy profile directory or zip file. The file header contains details about the profile.'
,'load pro.zip'
,'animation on'
,'frame 1.1'
,'animation next'
,'animation prev'
,'show fileheader'

,'### autoLoadOrientation and restore orientation DEFAULT ###'
,'# Jmol 11.7.30 saves the view of Spartan and Sygress (CAChe) files and can restore that view automatically at load time (set autoLoadOrienation TRUE) or later at any time (restore orientation DEFAULT). Try loading these files with and without these options.'
,'set autoLoadOrientation @{!autoLoadOrientation}'
,'load ethene.spartan'
,'load methanol.spartan'
,'restore orientation DEFAULT'

,'### draw FRAME ###'
,'# Jmol 11.7.29 adds a new option for the draw command. <b>draw ID xxx FRAME {center} {quaternion}</b> draws x,y,z coordinates for the frame defined by the specified quaternion at the specified center. Note that there are several ways of defining quaternions, not just the default "alpha-carbon" variety.'
,'load 1crn.pdb;zoom 400'
,'draw scale 2.0 width 0.1 FRAME {4.ca} @{quaternion({4})}'
 
,'### isosurface OBJ "filename" ###'
,'# Jmol 11.7.27 adds the capability to read surfaces of the <a href=http://www.eg-models.de/formats/Format_Obj.html>Wavefront OBJ</a> type. Only the vertex, group, and face records are used. The group records define sets of faces that can be loaded selectively using an integer after the filename. In addition, if the group name is of the form "g kRRGGBB", then RRGGBB is interpreted as a hexidecimal color key. The generated isosurface may be saved as a JVXL file using a new extension of that format that allows compression of face-color data. The surfaces may also be mapped or recolored in a solid color as can any other surface. Future versions of Jmol may utilize the Material (.mtl) file associated with these objects to better specify color.'
,'zap;center {105 45 0};isosurface OBJ "sample.obj";set antialiasdisplay true'
,'isosurface OBJ "sample.obj" 2'
,'isosurface OBJ "sample.obj" 3'
,'isosurface OBJ "sample.obj" 4'

,'### isosurface CONTOUR and CONTOURLINES|NOCONTOURLINES ###'
,'# Jmol 11.7.27 adds contour lines for mapped data. Hovering over these lines displays the value of the mapped function at this point. The default is 10 contour lines.'
,'load methanol.csf'
,'isosurface molecular map mep # as before'
,'isosurface molecular map contour mep'
,'isosurface molecular map contour 20 mep'
,'isosurface plane {1 1 1 0} map contour molecular'
,'isosurface plane {1 1 1 0} map contour mep #hover the mouse over a point in the plane'
,'isosurface contourlines nofill'
,'isosurface fill nocontourlines'
,'isosurface fill contourlines'

,'### isosurface AREA and VOLUME ###'
,'# Jmol 11.7.26 can calculate the area and volume associated with an isosurface. Values are reported and also stored in the variables <b>isosurfaceArea</b> and <b>isosurfaceVolume</b>, respectively. This measures the isosurface, not the model; whether or not this represents a good measure of the true molecular volume or area is unknown.'
,'load 1crn.pdb'
,'isosurface AREA VOLUME sasurface'
,'isosurface ignore {atomno < 100} sasurface'
,'isosurface AREA'
,'isosurface VOLUME'
,'x = "alert(\'area is " + isosurfaceArea + " and volume is " + isosurfaceVolume+"\')";javascript @x'
,'isosurface AREA VOLUME "1crn-molecular.jvxl" #note that AREA and VOLUME work when loading a JVXL file as well.'


,'### selective atom rotation and translation ###'
,'# Using <b>set dragSelected</b> in Jmol 11.7.25 you can move selected atoms around, translating them with ALT-SHIFT-LEFT mouse and rotating them around their geometric center using ALT-LEFT or CTRL-ALT-RIGHT. Selection halos are automatically turned on during mouse-drag actions. (Still a few bugs there....)'
,'load caffeine.xyz;load append water.xyz;frame 0;select 2.1;selectionHalos on'
,'set dragSelected !dragSelected'




,'### applet typing with CTRL-K and CTRL-ALT-K ###'
,'# Jmol 11.7.25 adds a new feature: You can type directly into the applet as though it were a console. To enable entry, start with CTRL-K or <b>set allowKeyStrokes !allowKeyStrokes;set showKeyStrokes TRUE</b>. Keystrokes are sent to the _KEYSTROKES echo, which is in the bottom left position. <b>disablePopupMenu</b> also functions to disable direct keyboard entry. A second CTRL-K disables keystrokes ( equivalent to </b>set allowKeystrokes FALSE</b>. CTRL-ALT-K can also turns keyboard entry of commands on and off, but not with display (<b>set allowKeystrokes !allowKeystrokes;set showKeystrokes FALSE</b>). When typing is enabled, the Jmol frank in the bottom right-hand corner will change color to blue (unsigned applet) or orange (signed applet).'
,'set allowKeyStrokes !allowKeyStrokes;set showKeyStrokes true # now type commands into the applet'
,'set allowKeyStrokes !allowKeyStrokes;set showKeyStrokes false # you can always type commands; they aren\'t necessarily displayed, though.'


,'### load "filename" {ijk i\'j\'k\' -1} ###'
,'# Jmol 11.7.23 adds the "-1" option to unit cell loading. This option forces full packing of the unit cell, which in some cases may be preferable to the 0 (unnormalized) or 1 (normalized) options. The common option to pack a single unit cell, {555 555 -1}, may be indicated using the PACKED keyword.'
,'load "quartz.cif" {555 555 0};rotate x 10;rotate y 10'
,'load "quartz.cif" {555 555 1};rotate x 10;rotate y 10'
,'load "quartz.cif" {555 555 -1};rotate x 10;rotate y 10'
,'load "dickite.cif" {555 555 0};rotate y 90'
,'load "dickite.cif" {555 555 1};rotate y 90'
,'load "dickite.cif" {555 555 -1};rotate y 90'
,'load "dickite.cif" PACKED;rotate y 90; # same thing'

,'### translate x|y|z x.x nm|angstroms|% ###'
,'# Jmol 11.7.22 allows translation by absolute or percentage amounts in the x, y, and z direction. Distances may be in nanometers or angstroms and are measured in the plane parallel to the screen and going through the geometric center of the model. For Z, the zoom is adjusted such that the viewable portion of the model in that plane is increased by the indicated distance; a too-positive number for Z translation (making the dimension upon which zoom is based less than 1 Angstrom across) will be ignored.'
,'load 1crn.pdb'
,'translate x 5.0 angstroms'
,'translate x -5.0 angstroms'
,'translate x -10%'
,'translate x 10%'
,'translate y 5.0 angstroms'
,'translate y -5.0 angstroms'
,'translate z 1.0 angstroms'
,'translate z -1.0 angstroms'
,'translate z 5.0 angstroms'
,'translate z -5.0 angstroms'
,'translate z 1 nm'
,'translate z -1 nm'


,'### Alchemy/3DNA file reader ###'
,'# Jmol 11.7.17 reads TRIPOS Alchemy files, including those produced in association with the <a href="http://rutchem.rutgers.edu/~xiangjun/3DNA/">3DNA software package</a>. '
,'load aspirin.alc'
,'load 3dna.alc;spacefill off;'

,'### error message returned in JavaScript inline loading methods ###'
,'# A new <a href=Jmol.js>Jmol.js</a> file associated with Jmol 11.7.16 returns file loading error messages with jmolLoadInline, jmolLoadInlineArray, jmolLoadInlineScript, jmolAppendInlineScript, and jmolAppendInlineArray.'
,'# <A href="javascript:alert(jmolLoadInline(\'6\\na structure\\nC 0 0 0\'))">bad structure</a>'
,'# <A href="javascript:alert(jmolLoadInline(\'6\\na structure\\nC 0 0 0\\nC 1 0 0\\nC 2 0 0\\nC 0 1 0\\nC 0 2 0\\nC 0 3 0\'))">no error</a>'

,'### load "xxxx.gamess" FILTER "[mo filters]" ###'
,'# Jmol 11.7.16 allows filtering of molecular orbitals in GAMESS files, where there may be more than one type. The filter uses ! as NOT and simply looks for lead-in lines that include or exclude the specified words separated by whitespace, commas, or semicolons. With NOT, the words are ANDed:!optimized,natural -- not optimized and not natural; otherwise they are ORed: initial,natural -- initial or natural.'
,'load guga.gamess.gz FILTER "natural";mo 20'
,'load guga.gamess.gz FILTER "!initial,natural";mo 100'

,'### Out Of Memory Error handling and jmolGetPropertyAsString("errorMessage") ###'
,'# Jmol 11.7.16 traps out-of-memory errors along with other compilation and scripting errors and saves the message in a property that can be checked. In this example we attempt to load a huge biomolecule that with previous versions of Jmol would crash the applet. After getting an error, click <a href="javascript:alert(jmolGetPropertyAsString(\'ErrorMessage\'))">here</a>. Still, it is possible to lose the applet or LiveConnect if this is done multiple times.'
,'load 1sva.pdb;restrict none;select *;cartoon;color chain #this is 1/60 of the viral coat'
,'load 1sva.pdb FILTER "biomolecule 1" # the entire virus -- at least on my machine, I get a "Java heap space" error.'
,'load 1crn.pdb # still possible to continue'
,'load quartz.cif {100 100 100} # too many unit cells'
,'load 1sva.pdb FILTER "*.CA, biomolecule 1";draw sphere diameter 400.0 {0 0 0} # better -- the entire virus, but alpha carbons only.'
,'isosurface resolution 100 molecular # WAY too high a resolution'

,'### save ... DELETE ###'
,'# Jmol 11.7.14 adds the capability to flush saved information from memory. All of the <b>save</b> command options may be deleted, including bonds, coordinates, orientation, selected, state, and structure.'

,'### sync * stereo ###'
,'# Jmol 11.7.13 introduces the capability to split the left and right eye images for stereo rendering into two different applets. This may be useful when the stereo image is to be displayed using a single monitor split between two cross-polarized projectors using the method of GeoWall. The command to initiate this is simply <b>sync * stereo</b> or <b>sync "X" stereo</b>, where X is the extension of an applet -- 0 for "JmolApplet0". All scripting and control is then carried out on the applet for which the command was issued (generally the applet on the left). The right-eye stereo image is then sent directly to the right-side applets\'s Graphics object. See <a href=syncstereo.htm>syncstereo.htm</a>.'

,'### # comments as targets of GOTO ###'
,'# Jmol 11.7.12 allows comments starting with # to act as targets of GOTO commands.'

,'### efvet file reading and JVXL 2.0 ###'
,'# Jmol 11.7.12 adds efvet (<a href="http://ef-site.hgc.jp/eF-site">ef-site.hgc.jp/eF-site</a>) surface file reading. These surface files contain vertex and triangle information but no "cube data". They are more similar therefore to pmesh files than isosurface files. However, they are particularly useful because they contain mapped data property information. This information is accessible using an integer after the filename. An XML comment in these files may identify the order of properties. In the example given here, the order is: (1) electrostatic_potential, (2) hydrophobicity, (3) temperature_factor, (4) minimum_curvature, and (5) maximum_curvature. In order to accomodate this type of file, a new JVXL file format was required. While Jmol 11.7.12 will still read JVXL 1.0 files, the new JVXL 2.0 files produced from vertex/triangle-only formats (pmesh and efvet) cannot be read by previous versions of Jmol.'
,'load 1lmb.pdb'
,'isosurface "1lmb.efvet.gz" # the first property (electrostatic potential)'
,'isosurface color "rwb" range -0.1 0.1 "1lmb.efvet.gz" 1 # same but colored differently'
,'isosurface "1lmb.efvet.gz" 2 # hydrophobicity'
,'isosurface "1lmb.efvet.gz" 3 # temperature_factor'
,'isosurface "1lmb.efvet.gz" 4 # minimum_curvature'
,'isosurface "1lmb.efvet.gz" 5 # maximum_curvature'

,'### PMESH command deprecated ###'
,'# Jmol 11.7.12 deprecates the PMESH command. This functionality has been merged with ISOSURFACE. You can still use the PMESH command, but it executes the ISOSURFACE command the same as any other ISOSURFACE command except for one property: files containing pure numbers are assumed to be pmesh files rather than cube files. The keyword PMESH can be added to any isosurface command to indicate that the next file read is in PMESH data format.'

,'### user-definable atom selector functions ###'
,'# Jmol 11.7.11 allows the definition of functions in Jmol that work with atom sets. For example:<pre>\n   function myFunc()\n     return _x.x + _x.y + _x.z\n   end function\n\n   print {*}.myFunc\n   print {*}.myFunc.min\n   print {*}.myFunc.max\n   print {*}.myFunc.all</pre>These functions may have parameters provided .min, .max, or .all are not used.'
,'load 1crn.pdb;draw sphere diameter 20.0 {0 0 0} translucent'
,'function myfunc;return sqrt(_x.x*_x.x + _x.y*_x.y + _x.z*_x.z);end function;select {*.ca} (myfunc < 10.0);spacefill on'
,'function dotpt(pt);return sqrt(_x.x*pt.x + _x.y*pt.y + _x.z*pt.z);end function;print {atomindex=3}.dotpt({1 2 3})'

,'### #comments now can be targets of GOTO ###'
,'# Starting with Jmol 11.7.11, both MESSAGE and comments starting with # can act as the target of a GOTO command. '

,'### set hbondsAngleMinimum, set hbondsDistanceMaximum, and calculate hbonds {atomset1} {atomset2} ###'
,'# Jmol 11.7.9 includes the option to calculate hydrogen bonds betweens any set of pairs of oxygen or nitrogen atoms that do not have H atoms attached. <b>hbondsDistanceMaximum</b> sets a maximum distance in Angstroms between the two heavy atoms (default 3.25). <b>hbondsAngleMinimum</b> (default 90) sets a minimum angle between the two heavy atoms and any atom attached to one or the other of those atoms. Note that some thought might be given to which oxygens are to be connected. The default will connect carbonyl groups. It is important to understand that these calculated hydrogen bonds are only where hydrogen bonds <em>might</em> be, not necessarily where hydrogen bonds actually exist. [Note that in Jmol 12.0, these parameters require <b>set hbondsRasmol false</b>.]'
,'set hbondsRasmol false;load 1crn.pdb;set hbondsAngleMinimum 90 # default'
,'calculate hbonds {*} {*};color hbonds yellow;hbonds 0.1'
,'hbonds delete;set hbondsAngleMinimum 120 # too restrictive'
,'calculate hbonds {*} {*};color hbonds yellow;hbonds 0.1'
,'set hbondsRasmol false;set hbondsAngleMinimum 90;load 1blu.pdb;calculate hbonds /* donor */ {_N or (*.O?? and not *.O and not ASN.OD1 and not GLN.OE1)} /* acceptor */ {_N or _O};hbonds 0.1 # more restrictive selection.'
,'display not water # protein only'
,'display not water or connected(not water) # protein + hydrogen-bonded waters'

,'### hbonds delete ###'
,'# Jmol 11.7.9 allows <b>hbonds delete</b> as an equivalent to <b>connect hbonds delete</b>'

,'### {xxx}.atomName = "name" ###'
,'# Jmol 11.7.8 allows renaming of atoms. If an array is specified, then the elements of the array are matched sequentially to atoms until the array or the list of atoms is exhausted. White-space characters should not be used in these names.'
,'load caffeine.xyz;label %a;'
,'{hydrogen}.atomName = "hydr";label %a;selectionHalos on;select hydr'

,'### select within(atomName,"XX,YY,ZZ,...") ###'
,'# Jmol 11.7.8 adds the option to select atoms based on atom names using the <b>within</b> function. The search is case-sensitive. While in general atoms can be selected just using their name -- <b>select C3</b> -- this method allows for both a more specific and a more generally applicable atom name search option.'
,'load caffeine.xyz;selectionhalos on;label %B;select within(atomName,"N4,O9")'

,'### {xxx}.atomType = "type" ###'
,'# Jmol 11.7.8 allows setting the atom type of an atom. If an array is specified, then the elements of the array are matched sequentially to atoms until the array or the list of atoms is exhausted. White-space characters should not be used in these types.'
,'load asp.mol2;label %B;'
,'{hydrogen}.atomType = "h";label %B'

,'### select within(atomType,"XX,YY,ZZ,..."); label %B ###'
,'# Jmol 11.7.8 adds the option to select and display atom types for mol2 and AMBER topology files. For other file types, type simply refers to the atom name (which is effectively an atom type in PDB files, for instance). Note that selection IS case sensitive. (NOTE: 11.7.2 was released with "type" instead of "atomType". 11.7.8 allows now just for "atomType".'
,'load asp.mol2;selectionhalos on;label %B;select within(atomType,"N.3")'
,'select within(atomType,"O.2")'
,'select within(atomType,"O.3")'
,'select within(atomType,"C.2,C.3")'
,'select within(atomType,"N.AM") # nothing selected'
,'select within(atomType,"N.am") # this works'
,'x = within("atomType","C.2,C.3");select @x # alternative method'

,'### dynamic element definition ###'
,'# Jmol 11.7.8 allows dynamic assignment of an element to an atom. The atom color is automatically changed back to its CPK default color. Either the atomic number or the element symbol can be specified.'
,'load caffeine.xyz'
,'{hydrogen and atomno < 10}.element = "B" # turn one of the hydrogens into a boron'
,'{boron}.element = 1 # back to hydrogen'
,'{atomno <= 3}.element = ["B","Fe","Cl"]'

,'### x = [...] ###'
,'# Jmol 11.7.7 introduces a simple JavaScript-like array definition option using square brackets.'
,'x = ["test",3,false];print x'
,'show x'
,'x = ["test",3,false];print x[1]'
,'x = ["test",3,false] + 4;print x # appending elements'
,'x = 4 + x;print x # prepending elements'

,'### user-defined atom types for mol2 and mdtop file reading ###'
,'# with Jmol 11.7.7 you can map user-defined (or Jmol-unknown) atom types to specific elements when reading mol2 and mdtop files.'
,'set atomTypes "";load asp.mol2;label %e(%B)'
,'set atomTypes "N.am=>Xx;O.3=>N";load asp.mol2;label %e(%B)'

,'### mol2/mdtop atom types ###'
,'# Jmol 11.7.7 reads AMBER, GAFF, COMPASS, CHARMM, CFF91, ESFF, PCFF, and SYBYL force field  atom types in mol2 and molecular dynamics topology files.'
,'load asp.mol2; label %B'

,'### cd command ###'
,'# Jmol 11.7.3/11.7.10 adds the cd command to display and set the default directory. With the signed applet or application, this can be either a local or web-based path. No comments are allowed on the CD line unless the path is in quotation marks. The CD command also sets the <b>defaultDirectoryWrite</b> parameter, which independently from the <b>defaultDirectory</b> parameter sets the directory used for the application and signed applet <b>write</b> command.'
,'cd;   # reports current directory and sets default directory to that. Note the semicolon.'
,'cd ?; # (signed applet and app only) opens a dialog for directory changing'
,'cd ..;# moves up one directory'
,'cd "" # resets the default directory where the page is located' 
,'cd "";cd "data"# moves to a subdirectory data'
,'x = file("");print x # assigns to x the full path to the current (default) directory'
,'x = defaultDirectory;print x # the current (default) directory as set by the user'

,'### x = file("filename") ###'
,'# The Jmol 11.7.3 file() function returns the full path to the specified file. If the filename contains a question mark and the applet is signed, a file dialog is displayed that allows the user to change directories (Jmol 11.7.3). Note that <b>load("filename")</b> returns the file contents of the file, not just its path. If the file is the empty string, the result is the current directory.'
,'print file("caffeine.xyz")'
,'x = file("");print x # assigns to x the current default directory'

,'### load [APPEND] MODELS/TRAJECTORY ###'
,'# Jmol 11.7.3 introduces load MODELS and expands load TRAJECTORY with the option to do so as an APPEND operation. '
+'Two syntaxes are allowed. MODELS/TRAJECTORY {first,last,stride} (commas optional) loads selected models of a set from a first model to a last model, with a step of stride. These numbers are zero-based and refer to the index of the model in the file (not the PDB MODEL record number associated with a model). A -1 for last indicates "to the end of the file." '
+'A second syntax allows selection of any set of models in a collection. This syntax uses the Jmol "bitset" notation involving parentheses, braces, ranges of values using colons, and no commas.'
,'load MODELS {0 6 2} cyclohexane_movie.xyz;frame all # the 1st, 3rd, 5th, and 7th models'
,'load MODELS ({0 2 4 6}) cyclohexane_movie.xyz; frame 0; # same as above, using a bitset' 
,'load TRAJECTORY {0 10 2} cyclohexane_movie.xyz; animation on # every other model, as a trajectory'


,'### draw LINE {pt1} {pt2} {pt3} ... ###'
,'# Jmol 11.7.1 introduces the LINE keyword for the draw command. Line segments are drawn from point to point for a series of points.'
,'zap;draw Line {0 0 0} {1 0 0} {1 3 0} {3 -3 0} {0 0 0}'
,'load caffeine.xyz;draw line {O9} {O11} {N21} {O9}'
,'load caffeine.xyz;draw line diameter 0.1 {N4 or O11} {O11 or N8} {N8 or N21}'

,'### load FILES/APPEND "[topologyFile]" FILTER "...." COORD {first,last,stride} "mdcrd::[coordinateFile]" ###'
,'# Jmol 11.7.1 allows reading of AMBER molecular dynamics topology and coordinate files. The command allows for one topology file and any number of coordinate files to be specified. '
+'One of the keywords FILES or APPEND is required, and at least one COORD keyword must be present. FILES replaces any current models with the trajectory; APPEND (starting with Jmol 11.7.3) creates a separate trajectory that can be overlayed with another using, for example, <b>frame *;display 1.1,2.1</b>. Any number of {first,last,stride} may be present. '
+'If multiple {first,last,stride} are present, each must be preceded by a new COORD keyword. If {first,last,stride} is not present, {0,-1,1} is presumed -- that is, all trajectories from all files. '
+'(A -1 for "last" indicates "to the end of the file".) The FILTER keyword is strongly recommended. In particular, "![WAT]" is recommended so as to not load water atoms, thus saving memory. '
+'The prefix "mdcrd::" is required on AMBER coordinate files, since those files have no header to distinguish them, and Jmol does not use file extensions for file typing. All file names must be quoted. '
+'Coordinate data are loaded as Jmol trajectories. This means that there is one set of atoms, and when a frame change is made, only the coordinates change. It is possible to superimpose multiple trajectory steps, but in order to do that '
+'one must load the fileset multiple times, using load FILES for the first trajectory and APPEND for the others. Jmol 11.7.3 adds the capability to load any specific trajectory steps using the bitset notation ({a b c:d e})'

,'zap;set echo top left;echo loading...;refresh;load FILES "bs.prmtop.gz" COORD "mdcrd::bs_md1.coord.gz" # first frame only, includes water'

,'zap;set echo top left;echo loading...;refresh;load FILES "bs.prmtop.gz" FILTER "![WAT]" COORD {0,9,2} "mdcrd::bs_md1.coord.gz" # frames 0 through 9, every other frame, filtering out water'
,'animation mode loop; animation on'
,'animation off'
,'zap;set echo top left;echo loading...;refresh;load FILES "bs.prmtop.gz" FILTER "![WAT]" COORD ({5:8}) "mdcrd::bs_md1.coord.gz" # frames 0 through 9, every other frame, filtering out water, Jmol 11.7.3 bitset notiation'
,'zap;set echo top left;echo loading...;refresh;load FILES "bs.prmtop.gz" FILTER "![WAT]" COORD {0,-1,1} "mdcrd::bs_md1.coord.gz" "mdcrd::bs_md2.coord.gz" "mdcrd::bs_md3.coord.gz";animation mode palindrome; animation on # all frames in three coordinate files'
,'zap;set echo top left;echo loading...;refresh;load FILES "bs.prmtop.gz" FILTER "![WAT]" COORD {2,-1,1} "mdcrd::bs_md1.coord.gz" COORD {0,-1,1} "mdcrd::bs_md2.coord.gz" "mdcrd::bs_md3.coord.gz"; animation on # starting with the THIRD frame ("frame 2" in VMD parlance)'
,'zap;set echo top left;echo loading...;refresh;load FILES "bs.prmtop.gz" FILTER "![WAT]" COORD {0,-1,1} "mdcrd::bs_md1.coord.gz";load APPEND "bs.prmtop.gz" FILTER "![WAT]" COORD {0,-1,1} "mdcrd::bs_md2.coord.gz";frame *;display 1.1,2.1 # two parallel trajectories'
,'display 1.2,2.2'
,'display 1.3,2.3'
,'display 1.4,2.4'
,'display 1.5,2.5'
,'for (var i = 1; i <= 10; i = i + 1);script inline @{"display 1."+i+",2."+i};delay 0.1;end for'
,'select 1.1,2.1 # note that any reference to a specific trajectory step, even SELECT, switches coordinates'


,' See textarea below for results:<br> <a href=javascript:dotest(-1)>[appletInfo]</a>'
 +' <a href=javascript:dotest(-2)>[animationInfo]</a>'
 +' <a href=javascript:dotest(0)>[fileName]</a>'
 +' <a href=javascript:dotest(1)>[fileHeader]</a>'
 +' <a href=javascript:dotest(2)>[fileContents]</a>'
 +'<br><a href=javascript:dotest(8.1)>[atomList]</a>'
 +' <a href=javascript:dotest(8)>[atomInfo]</a>'
 +' <a href=javascript:dotest(7)>[bondInfo]</a>'
 +' <a href=javascript:dotest(7.5)>[moleculeInfo]</a>'
 +" <a href=javascript:dotest(10)>[extractModel]</a>"
 +'<br><a href=javascript:dotest(3)>[orientationInfo]</a>'
 +' <a href=javascript:dotest(3.1)>[auxiliaryInfo]</a>'
 +' <a href=javascript:dotest(3.2)>[transformInfo]</a>'
 +' <a href=javascript:dotest(3.3)>[centerInfo]</a>'
 +' <a href=javascript:dotest(3.4)>[boundboxInfo]</a>'
 +"<br><a href=javascript:dotest(4)>[modelInfo]</a>"
 +" <a href=javascript:dotest(4.2)>[polymerInfo]</a>"
 +" <a href=javascript:dotest(4.3)>[chainInfo]</a>"
 +" <a href=javascript:dotest(4.4)>[shapeInfo]</a>"
 +" <a href=javascript:dotest(4.5)>[stateInfo]</a>"
 +" <a href=javascript:dotest(9)>[reload THIS orientation]</a>"
 +"<br><br>"


//," JSON data returned:<br><textarea name=outputJSON id=outputJSON rows=5 cols=50></textarea>"
," <input  type=checkbox name=idecode id=idecode checked=1>Decoded: <a href=javascript:showoutput()>new window</a><br><textarea name=output id=output rows=5 cols=50 wrap=off></textarea>"
)
remarks=""
//]]>


function getCallbackOptions(){
 var s=""
 for(var i=0;i<Callbacks.length;i++)if(document.getElementById(Callbacks[i]).checked)s+=Callbacks[i]
 var waspolling = polling
 polling = (s!="")
 if(polling && !waspolling)pollApplet()
 return "monitoring:"+s
}

function pollApplet(){
   whatm=getCallbackOptions()
   if(!polling){
	document.title = ""
	return
   }
   document.title = (new Date())
   var A=jmolGetStatus(whatm)
   parseMessages(A)
   if(polling)setTimeout("pollApplet()",delayms)
}

function setOptions(all_or_none){
 for(var i=0;i<Callbacks.length;i++)document.getElementById(Callbacks[i]).checked = all_or_none
 polling = (all_or_none == 1) 
}


function test1() {
 jmolSetAtomCoordRelative(Math.floor(Math.random()*6),Math.random()/5-0.1,Math.random()/5-0.1,Math.random()/5-0.1)
 jmolScriptWait("refresh")
}

function test2() {
 jmolScript("data \"coord\"3;1 2 3 4;2 3 4 5;5 6 7 8;end \"coord\";")
}
	

	function fire(i0,n){
 for(var i=0; i < n; i++) {
   //alert(Scripts[i0+i]);
   jmolScript(Scripts[i0+i]);
 }
}


what="visible"
whatp="centerInfo"
whatm=""

function xshowoutput(s){ if(!s) s=document.getElementById("output").value; dowritenew("<pre>"+s+"</pre>") };function oldshowoutput(){
 dowritenew("<pre>"+document.getElementById("output").value+"</pre>")
}

function dotest(iwhat){
 if(iwhat!=3)monitoron=false
 var s=""
 var sJSON=""
 var info=""
 var sinfo=""
 var sparam=""
 var str=""
 if(iwhat==-1){
   sinfo="appletInfo"
 }else if(iwhat==-2){
   sinfo="animationInfo"
 }else if(iwhat==0){
   str="fileName"
 }else if(iwhat==1){
   str="fileHeader"
   info = jmolGetPropertyAsString(sinfo)
 }else if(iwhat==2){
   str="fileContents"
 }else if(iwhat==3){
   sinfo="orientationInfo"
 }else if(iwhat==3.1){
   sinfo="auxiliaryInfo"
 }else if(iwhat==3.2){
   sinfo="transformInfo"
 }else if(iwhat==3.3){
   sinfo="centerInfo"
 }else if(iwhat==3.4){
   sinfo="boundboxInfo"
 }else if(iwhat==3.5){
   sinfo="zoomInfo"
 }else if(iwhat==4){
   sinfo="modelInfo"
 }else if(iwhat==4.2){
   sparam="PROMPT"
   sinfo="polymerInfo"
 }else if(iwhat==4.3){
   sparam="PROMPT"
   sinfo="chainInfo"
 }else if(iwhat==4.4){
   sinfo="shapeInfo"
 }else if(iwhat==4.5){
   str="stateInfo"
 }else if(iwhat==7){
   sparam="PROMPT"
   sinfo="bondInfo"
 }else if(iwhat==7.5){
   sparam="PROMPT"
   sinfo="moleculeInfo"
 }else if(iwhat==8){
   sparam="PROMPT"
   sinfo="atomInfo"
 }else if(iwhat==8.1){
   sparam="PROMPT"
   sinfo="atomList"
 }else if(iwhat==9){
   info = jmolGetPropertyAsArray("orientationInfo")
   s="load "+jmolGetPropertyAsString("fileName")+";"+info.moveTo
   document.getElementById("cmd").value=s
   jmolScript(s)
 }else if(iwhat==10){
   s=prompt("enter an atom expression",what)
   if(!s)return
   what=s
   s = jmolGetPropertyAsString("extractModel",what)
   var A=jmolGetPropertyAsArray("orientationInfo")
   showoutput(s);   jmolLoadInlineScript(s,A.moveTo)
 }
 var cmd=""
 if(str!=""){
   cmd = "jmolGetPropertyAsString(\"" + str + "\")"
   s=jmolGetPropertyAsString(str)
 }else if(sinfo!=""){
   if(sparam == "PROMPT"){
     s=prompt("enter an atom expression",what)
     if(!s)return
     what=s
     sparam=what
   }
   if(document.getElementById("idecode").checked){
   cmd = "jmolGetPropertyAsArray(\"" + sinfo + "\",\"" + sparam + "\")"
	s=jmolGetPropertyAsArray(sinfo,sparam)
	s=_jmolEnumerateObject(s,sinfo)
   }else{
   cmd = "jmolGetPropertyAsJSON(\"" + sinfo + "\",\"" + sparam + "\")"
	s=jmolGetPropertyAsJSON(sinfo,sparam)
   }
 }
 if(s!="")document.getElementById("output").value=cmd + "\n\n" + s
}

function parseMessages(A){
 if(!A)return
 var s=""
 for(var i=A.length-1;i>=0;i--){
	s=A[i][3]+"\n"+s
	showmsg("msg",A[i])
 }
 document.getElementById("output").value=s
}

monitoron=0
function domonitor(isiter){
  if(!isiter)monitoron=!monitoron
  if(!monitoron)return
  dotest(3)
  setTimeout("domonitor(1)",delayms)  
}

</script>
</head>
<body onload="checkScroll()">
<script type="text/javascript">
showpage(0)
document.write(jmolButton("background red"))
</script>
</body>
</html>

<?xml version="1.0"?>
<!DOCTYPE somethingOrAnything [
<!ENTITY eye_candy          SYSTEM "eye_candy.xml" >
<!ENTITY basic_scripting    SYSTEM "basic_scripting.xml" >
]>
<!--
  French translation 
  Translated from default version : index_en.xml 
-->
<document>
	<body>
		<title>Langage de Script Jmol</title>
		<header>
			<p><i>
	Please, note that these methods do not use the Jmol.js library, which is 
	the currently recommended method to start scripting JmolApplet.
  			</i></p>
			<p>
        L'application et l'applet supportent toutes les deux un langage
        de script. Les exemples ci-dessous utilisent l'applet, mais les
        scripts peuvent aussi être utilisés dans
        l'application Jmol. Nous recommandons de tester et de
        débuguer les grands scripts dans le contexte de
        l'application Jmol car vous pouvez recevoir des messages de
        diagnostic d'erreur.
      </p>
			<p>
        Jmol implémente un grand sous-ensemble du langage de
        script de visualisation moléculaire RasMol/Chime.
			</p>
			<p>
         Une
        description complète du langage de script RasMol est
        disponible dans le manuel RasMol sur le site web Open RasMol
        à
        <a href="http://www.openrasmol.org/">
          http://www.openrasmol.org
        </a>.
        Une description des extensions du langage de script pour le
        plug-in MDL Chime est disponible à
        <a href="http://www.mdlchime.com/">http://www.mdlchime.com</a>.
      </p>
			<p>
        Une description de l'implémentation Jmol du langage de
        script est disponible dans le
        <a href="http://www.stolaf.edu/academics/chemapps/jmol/docs/">
        Documentation Librairie JavaScript</a>. 
      </p>
			<p>
        Pour les petits scripts la
        transition de Chime à Jmol devrait être
        immédiate. Avec des application web Chime plus grosses,
        plus compliquées vous risquez d'avoir des difficultés
        car le mécanisme de bouton/événement est
        différent.
      </p>
			<p>
        Les scripts simples qui sont exécutés au chargement
        de l'applet peuvent être exécutés en
        utilisant le paramètre "script" dans votre définition
        HTML de votre applet. Ces scripts s'exécuteront sur les
        plateformes de navigateurs qui ne supportent pas JavaScript ou
        l'interface LiveConnect entre JavaScript et les applets Java.
      </p>
			<p>
        Pour développer des applications web plus flexibles en
        utilisant l'applet Jmol, vous écrivez du code JavaScript
        qui passe des chaînes de caractères en utilisant
        la méthode "script" de l'applet.
      </p>
			<p>
        Pour des exemples supplémentaires et de la documentation
        sur le langage de script Jmol, se reporter à
        <a href="../docs">page de documentation</a>.
      </p>
		</header>
		<section title="Eye Candy Sans JavaScript">
			<p>
        Cet exemple démontre comment le langage de script peut
        être utilisé sans JavaScript. Les navigateurs qui
        ne supportent pas la communication LiveConnect entre JavaScript
        et les applets Java fonctionneront quand même avec ce
        type de script.

        <table border="1"><tr><td>
							<appletExample>&eye_candy;</appletExample>
						</td></tr></table>
			</p>
			<br/>
		</section>
		<section title="Langage de Script Basique">
			<p>
        Cet exemple montre une partie du langage de script disponible.
        <appletExample>&basic_scripting;</appletExample>
			</p>
		</section>
		<section title="Langage de Script Avancé">
			<p>
        Plus sophistiqué et plus facile de coder les méthodes d'interaction 
        sont basés sur JavaScript et fourni par la bibliothèque Jmol.js
			</p>
		</section>
	</body>
</document>

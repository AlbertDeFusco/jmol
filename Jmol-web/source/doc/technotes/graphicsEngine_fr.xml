<!--
  French translation 
  Translated from default version : graphicsEngine.xml (v 1.1)
-->
<section title="Moteur Graphique">
  <p>
    Le moteur graphique de Jmol est enti&#x00E8;rement &#x00E9;crit en
    Java. Il n'y a pas de Java3D, OpenGL ou d'autre type
    d'acc&#x00E9;l&#x00E9;ration mat&#x00E9;rielle.
  </p>
  <p>
    Le moteur graphique est un moteur graphique sp&#x00E9;cialis&#x00E9;,
    et non une libraire graphique 3D g&#x00E9;n&#x00E9;rique.
    Le moteur de dessin a &#x00E9;t&#x00E9; con&#x00E7;u expr&#x00E8;s
    pour l'affichage de mol&#x00E9;cules, il fait donc un bon travail
    pour le dessin de sph&#x00E8;res et de cylindres.
  </p>
  <p>
    Il s'agit d'une impl&#x00E9;mentation enti&#x00E8;rement logicielle
    d'un z-buffer. Il y a un int[] pixelBuffer qui contient les valeurs
    ARGB et un short[] zBuffer qui contient la profondeur du pixel
    &#x00E0; ce point.
  </p>
  <p>
    Pendant le cycle de redessin, la sc&#x00E8;ne compl&#x00E8;te est
    dessin&#x00E9;e dans le pixelBuffer. Puis la sc&#x00E8;ne
    compl&#x00E8;te est dessin&#x00E9;e sous la forme d'image avec une
    seule op&#x00E9;ration Graphics.drawImage(...).
  </p>
  <p>
    Il n'utilise pas une liste d'affichage de triangles. Ce serait trop
    lent. Au lieu de ceci, il y a des routines optimis&#x00E9;es pour
    dessiner des sph&#x00E8;res et des cylindres.
  </p>
  <p>
    <i>Si vous voyez des fa&#x00E7;ons d'am&#x00E9;liorer la vitesse
    de dessin, fa&#x00EE;tes le nous savoir!</i>
  </p>
</section>

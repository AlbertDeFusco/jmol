<section title="Floats vs. Doubles">
  <p>
    Several people have asked why the Jmol code uses floats instead of
    doubles. Indeed, many younger Java programmers have probably never
    seen a program with so many floats. 
  </p>
  <p>
    The answer is that they are smaller ... floats take up 4 bytes
    and doubles take up 8 bytes. And yet, they have plenty of range
    and precision for our purposes.
  </p>
  <p>
    So, why is smaller important? You probably say that memory is cheap,
    and, in general, you are right. 
  </p>
  <p>
    However, Jmol needs to run as an applet on 1.1 JVMs, where the
    amount of virtual memory is somewhat smaller.
  </p>
  <p>
    More importantly, memory <i>bandwidth</i> is never cheap. CPU
    manufacturers do everything they can to try to design larger
    caches to try to increase the effective memory bandwidth.
    So, by working with 4-byte floats instead of 8-byte doubles,
    we make more effective use of memory system ... the various
    layers of caching + overall memory bandwidth. We get to store
    more data in a fixed-size cache and we get to retrieve more
    data from memory each time we access a cache line. 
  </p>
  <p>
    Frankly, it is just as easy to use floats ... and there is no
    reason to be wasteful.
  </p>
</section>
